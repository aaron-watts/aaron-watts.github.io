<?xml version='1.0' encoding='UTF-8'?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://aaronwatts.dev/guides/feed.xml" rel="self" type="applications/rss+xml" />
    <title>AaronWattsDev Latest</title>
    <link>https://aaronwatts.dev/guides</link>
    <description>The most recent content on AaronWattsDev</description>
    <category>Technology</category>
    <item>
      <title>Web Fonts</title>
      <link>https://aaronwatts.dev/guides/web-fonts</link>
      <pubDate>Sat, 05 Apr 2025 08:00:00 GMT</pubDate>
      <description>If you've ever used an older or lower spec device, or had a slow connection on a public wifi network, you may have noticed the fonts on a web page get loaded after the content and layout. Most of the time this is virtually unnoticable, but once you've seen it, as with most things traumatic, it is hard to unsee it. But there are a few steps we can take to mitigate this from happening.</description>
      <guid>https://aaronwatts.dev/guides/web-fonts</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/web-fonts.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/web-fonts.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/web-fonts.jpg" />
    </item>
    <item>
      <title>Watchy - Arduino IDE</title>
      <link>https://aaronwatts.dev/guides/watchy</link>
      <pubDate>Sun, 25 Aug 2024 08:00:00 GMT</pubDate>
      <description>I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did.</description>
      <guid>https://aaronwatts.dev/guides/watchy</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/watchy.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/watchy.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/watchy.jpg" />
    </item>
    <item>
      <title>Firefox Web Apps - Plasma Bigscreen</title>
      <link>https://aaronwatts.dev/guides/firefox-web-apps</link>
      <pubDate>Thu, 22 Aug 2024 08:00:00 GMT</pubDate>
      <description>With the introduction of Web Manifest V3, ad blocking in Chromium based browsers is changing. the new limitations and API's for browser extensions means ad blockers, such as Ublock Origin are less effective than they once were. Firefox will still be using Manifest V2 for a while yet, but the fact that Firefox, on the dekstop at least, does not have support for PWA's (progressive web apps) may hinder the user experience for those off us using Plasma Bigscreen as a streaming OS. Luckily, Linux is flexible, and there's an easy way to get Firefox Web Apps.</description>
      <guid>https://aaronwatts.dev/guides/firefox-web-apps</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/firefox-web-apps.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/firefox-web-apps.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/firefox-web-apps.jpg" />
    </item>
    <item>
      <title>Google Calendar API - Apps Script</title>
      <link>https://aaronwatts.dev/guides/google-calendar-appscript-api</link>
      <pubDate>Fri, 21 Jun 2024 08:00:00 GMT</pubDate>
      <description>Considering how long they've been around, working with iCal's in the browser is surprisingly difficult. When working with data from Google Calendar, we can use Google's Apps Script to create an API, that will let us pull exactly what we desire down from a Google Calendar.</description>
      <guid>https://aaronwatts.dev/guides/google-calendar-appscript-api</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/google-calendar-appscript-api.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/google-calendar-appscript-api.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/google-calendar-appscript-api.jpg" />
    </item>
    <item>
      <title>Static Website - Github Pages</title>
      <link>https://aaronwatts.dev/guides/github-pages-static-website</link>
      <pubDate>Sun, 09 Jun 2024 08:00:00 GMT</pubDate>
      <description>You don't always need a full stack. When all you need to do is show information, a static website is enough. And with Github Pages, it is possible to have a fully functioning website for free, just like this one! It could just be the perfect solution for your portfolio page.</description>
      <guid>https://aaronwatts.dev/guides/github-pages-static-website</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/github-pages-static-website.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/github-pages-static-website.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/github-pages-static-website.jpg" />
    </item>
    <item>
      <title>Raspberry Pi 5 - Desktop Computer</title>
      <link>https://aaronwatts.dev/guides/pi5-desktop</link>
      <pubDate>Fri, 31 May 2024 08:00:00 GMT</pubDate>
      <description>This is less of a guide, and more just an outline of how, and why, I'm doing it. As well as a review of how it's going. It's not here as clickbait, you might not want to do it yourself, but I'm here to say that it's working for me.</description>
      <guid>https://aaronwatts.dev/guides/pi5-desktop</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/pi5-desktop.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/pi5-desktop.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/pi5-desktop.jpg" />
    </item>
    <item>
      <title>GPi Case 2 - Compute Module 4</title>
      <link>https://aaronwatts.dev/guides/gpicase</link>
      <pubDate>Sun, 28 Apr 2024 08:00:00 GMT</pubDate>
      <description>The GPi Case 2 with Raspberry Pi's Compute Module 4 is the ultimate portable gaming device. The case offers amazing functionality, and when combined with a CM4 and 64-bit Recalbox, there is little that can challenge it for a portable retro gaming experience.</description>
      <guid>https://aaronwatts.dev/guides/gpicase</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/gpicase.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/gpicase.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/gpicase.jpg" />
    </item>
    <item>
      <title>RetroPie - RetroFlag NesPi 4 Case</title>
      <link>https://aaronwatts.dev/guides/retropie-nespi-4</link>
      <pubDate>Tue, 23 Apr 2024 08:00:00 GMT</pubDate>
      <description>The Raspberry Pi 4, with Retroflag's NesPi 4 Case, running RetroPie is the ultimate retro gaming rig. Low power consumption? Check. Light gun games? You got it. Great customisation options? Of course. Did you know you can even use a wiimote as the stylus for the Drastic Nintendo DS Emulator?? Did I hear someone say Wario Ware?</description>
      <guid>https://aaronwatts.dev/guides/retropie-nespi-4</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/retropie-nespi-4.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/retropie-nespi-4.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/retropie-nespi-4.jpg" />
    </item>
    <item>
      <title>Media Keyboard - Pico Controller</title>
      <link>https://aaronwatts.dev/guides/media-keyboard</link>
      <pubDate>Sun, 14 Apr 2024 08:00:00 GMT</pubDate>
      <description>My keyboard doesn't include the media keys, so I built a macro keyboard to control the media on my desktop computer. It is plug'n'play and requires no configuration to work between different devices. The project can be easily tweaked to program macro's for work, steam games, and whatever else you can't be bothered to type out manually.</description>
      <guid>https://aaronwatts.dev/guides/media-keyboard</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/media-keyboard.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/media-keyboard.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/media-keyboard.jpg" />
    </item>
    <item>
      <title>KDE Plasma Bigscreen - Raspberry Pi 4</title>
      <link>https://aaronwatts.dev/guides/kde-plasma-bigscreen</link>
      <pubDate>Tue, 02 Apr 2024 08:00:00 GMT</pubDate>
      <description>I built this media centre at the start of 2024. There may be easier methods of installation by now. When I built this project, existing guides mentioned an installation image on KDE's bigscreen page, however, it doesn't seem to exist currently, except for a manjaro image, and I prefer to stick to Raspberry Pi's own debian OS when I can, especially that it ensures the best compatibility with things like cases and accessories.</description>
      <guid>https://aaronwatts.dev/guides/kde-plasma-bigscreen</guid>
      <content:encoded>&lt;h1&gt;Watchy - Arduino IDE&lt;/h1&gt;&lt;time datetime="2024-08-25"&gt;25&lt;sup&gt;th&lt;/sup&gt; August, 2024&lt;/time&gt;&lt;img alt="A Watchy with gun metal case displaying the time, date, weather and a steps count in a custom monospace font." src="https://aaronwattsdev.com/images/guides/watchy.jpg"/&gt;&lt;p id="intro"&gt; I didn't intend to write an article about Watchy, as I only bought it to satisfy my nerd fetish. But after the trouble I had getting it to work, I thought I might write a short guide to assist anyone who might run into some of the same issues I did. &lt;/p&gt;&lt;p&gt; &lt;a href="https://watchy.sqfmi.com/" target="_blank"&gt;Watchy&lt;/a&gt;, by SQFMI, is an awesome gadget. In short it's a programmable watch, that you assemble yourself, with added wifi and accelerometer. It doesn't necessarily connect to your phone, so it's not a &lt;em&gt;smart&lt;/em&gt; watch &lt;em&gt;per se&lt;/em&gt;, but it is a clever watch. But, and it's a big but, the documentation is somewhat lacking. Unless you end up with the V3 watchy, the little documentation there is, is utterly useless. &lt;/p&gt;&lt;p&gt; I bought mine from the &lt;a href="https://thepihut.com" target="_blank"&gt;The Pi Hut&lt;/a&gt;, which, according to the description on their site is a V2. If you end up with anything less than a V3, don't even bother with the &lt;a href="https://watchy.sqfmi.com/docs/getting-started/" target="_blank"&gt;documentation&lt;/a&gt; beyond the initial assembly, because it won't work. &lt;/p&gt;&lt;h2 id="signs"&gt;First Signs Something Is Wrong&lt;/h2&gt;&lt;p&gt; So after assembly, and following the documentation to a tee, I tried the first seemingly obvious and easy thing to customise my watchy; I tried to change the watch face using one of the provided examples in the Arduino IDE. First I got an error that told me that my device was &lt;em&gt;ESP32&lt;/em&gt; and not &lt;em&gt;ESP32-S3&lt;/em&gt;. The error killed the operation. So, perhaps foolishly, seeing there wasn't really a solution offered within the docs, I did what that error told me, and switched boards in the IDE from &lt;em&gt;ESP32S3-dev&lt;/em&gt; to &lt;em&gt;ESP32-dev&lt;/em&gt;. The code compiled (very slowly!), and it flashed - common sense and a good error message had saved the day, or so it seemed. &lt;/p&gt;&lt;p&gt; Once the code had written to the flash storage, it went to reset the device. It seemed to hang on that message. No bother, things sometimes take a while, I'll go make a cup of tea while it finishes up. After I had finished staining my teeth with delicious taurine, I came back to check on Watchy, but it still hadn't reset. I waited a bit longer but nothing happened. E-Ink displays aren't particularly helpful here as they maintain their last image, so I wasn't sure if it had worked but the buttons had stopped working, or if it hadn't worked, until enough time had passed for me to be sure the time wasn't updating. &lt;/p&gt;&lt;p&gt; Even in the preloaded demo, the buttons seemed somewhat unresponsive when trying to operate the Watchy. In particular, I couldn't seem to get the thing to reset or go into boot select mode. After searching online I was worried that it would require soldering to fix a button or the reset - I am not very exeperienced with soldering, and on such small components I am sure it would look as though something has sneezed metal across the board once I was done with it. &lt;/p&gt;&lt;h2 id="model"&gt;Figuring Out Which Model You Have&lt;/h2&gt;&lt;p&gt; So, as I mentioned, the docs are useless now. There is a Discord server where you can find some help, but personally, I'm not the biggest fan of chat rooms - they have their place of course, and that is on dial up back in the early 2000's. Anyway, I did it, so you don't have to, but if you enjoy trawling through messages upon messages that aren't necessarily the same conversation as you are partaking in, then be my guest. &lt;/p&gt;&lt;p&gt; One issue with working with Watchy in Arduino IDE, is that it's slow, &lt;em&gt;really slow&lt;/em&gt;. Luckily, there's a python package and a couple of binaries we can use to quickly figure out if which version of Watchy we have. Szybet's &lt;a href="https://github.com/Szybet/InkWatchy/wiki/Trying-out-the-demo-firmware" target="_blank"&gt;InkWatchy&lt;/a&gt; firmware has a couple of &lt;a href="https://github.com/Szybet/InkWatchy/releases" target="_blank"&gt;binary demo's&lt;/a&gt; we can quickly flash to Watchy, and see which one works. To do so, we will need a Python package called ESPTool. &lt;/p&gt;&lt;p&gt; I have mentioned quite a few times before, in previous articles, that nowadays I compute exclusively on a Raspberry Pi. Unfortunately there wasn't an esptool package in apt, and from what I have read elsewhere, what you can get in apt on other distro's is pretty outdated. To install esptool, first create a directory where you can work on your Watchy stuff, maybe call it &lt;code&gt;watchy/&lt;/code&gt; or something like that. Then, inside that directory, create a virtual environment where you can install esptool. &lt;/p&gt;&lt;aside&gt; NOTE: always make sure to deactivate the virtual environment before closing your terminal! &lt;/aside&gt;&lt;pre class="language-none"&gt;&lt;code&gt;# create virtual environment
python -m venv esptoolenv

# activate virtual environment
source esptoolenv/bin/activate

# install package
pip3 install esptool==4.5.dev2

# deactivate virtual environment
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; Now we have the virtual environment set up, copy those two firmware binaries over to the parent directory of the vitrual environment, and we can try to flash each one using the following instructions. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;source esptoolenv/bin/activate
esptool.py write_flash 0x00000 &amp;lt;demo-name&amp;gt;.bin&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; If &lt;code&gt;Watchy_3-demo.bin&lt;/code&gt; works, you have a V3 Watchy, and you probably just need to make sure you are using up to date versions of the esprissif ESP Board and Watchy libraries. If &lt;code&gt;Watchy_2-demo.bin&lt;/code&gt; then you have a V2 or lower, and will need to change a few things in your Arduino IDE to get the Watchy to flash, so read on. &lt;/p&gt;&lt;h2 id="arduino"&gt;Setting Up The Arduino IDE&lt;/h2&gt;&lt;p&gt; If you are also using a Raspberry Pi 5 like me, you might have noticed that the Arduino IDE has gone missing from the reccomended software app. We still have a few options for installation though. There is an apt package, but it's ugly as hell and the menu's don't pick up on the theming. There is also a version in Pi-Apps, but to be safe, I am using the &lt;a href="https://docs.arduino.cc/software/ide-v1/tutorials/Linux/" target="_blank"&gt;legacy version&lt;/a&gt; from the official website, and everything works with it. You will still want to follow the instructions in the &lt;a href="https://watchy.sqfmi.com/docs/getting-started#arduino-setup" target="_blank"&gt;Watchy Docs&lt;/a&gt; with regards to setting up Arduino, except instead of installing &lt;code&gt;v2.0.17+&lt;/code&gt; of the esp32 platform, install &lt;code&gt;v2.0.11&lt;/code&gt;. And, instead of the latest version of the Watchy library, install &lt;code&gt;1.4.7&lt;/code&gt;. &lt;/p&gt;&lt;p&gt; Instead of choosing the ESP32S3-Dev Module board, scroll down in the &lt;em&gt;ESP Arduino&lt;/em&gt; boards list until you find &lt;em&gt;Watchy&lt;/em&gt;, and select that. Under &lt;em&gt;Board Revision&lt;/em&gt;, &lt;em&gt;Watchy v1.0&lt;/em&gt; seems to work well - the buttons seemed far more responsive after flashing with this option than when in the preinstalled demo firmware, so I haven't actually tried the other versions as of yet. Your next attempt to flash Watchy using the Arduino IDE should now work, so don't throw it in the parts bin! &lt;/p&gt;&lt;h2 id="customising"&gt;Customising Watchy&lt;/h2&gt;&lt;p&gt; I'm not going to go into detail here, after all this is the fun of having a Watchy. Go hack and learn some stuff about programming. However, as a hint, the Watchy firmware library is in &lt;code&gt;~/Arduino/libraries/Watchy/src/&lt;/code&gt;, just in case you might want to try and figure out a better alternative to Watchy displaying it's own internal temperature when it doesn't have a wifi connection to retreive weather data. And if you want to try another firmware on top of the two we've seen here, &lt;a href="https://github.com/GuruSR/Watchy_GSR/tree/master" target="_blank"&gt;Watchy_GSR&lt;/a&gt; is worth a look and has much better documentation than Watchy does itself! &lt;/p&gt;&lt;h3&gt;Fonts&lt;/h3&gt;&lt;p&gt; The online font converter was down when I went to use it. It seems to be back online now. But just in case there is an issue with it when you go to use it yourself, you can get the tool itself from an Arduino library within the Arduino IDE. Just &lt;code&gt;cd&lt;/code&gt; into the following directory and &lt;code&gt;make&lt;/code&gt; the binary yourself, then you can convert your fonts for Watchy yourself. &lt;/p&gt;&lt;pre class="language-none"&gt;&lt;code&gt;cd ~/Arduino/libraries/Adafruit_GFX_Library/fontconvert
make
./fontconvert &amp;lt;path-to-font&amp;gt; &amp;lt;size&amp;gt; &amp;gt;&amp;gt; my_font.h&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <enclosure url="https://aaronwatts.dev/images/guides/kde-plasma-bigscreen.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwatts.dev/images/guides/kde-plasma-bigscreen.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwatts.dev/images/guides/kde-plasma-bigscreen.jpg" />
    </item>
  </channel>
</rss>