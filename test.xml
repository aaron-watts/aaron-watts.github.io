<?xml version='1.0' encoding='UTF-8'?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <atom:link href="https://aaronwattsdev.com/feed.xml" rel="self" type="applications/rss+xml" />
    <title>AaronWattsDev Projects</title>
    <link>https://aaronwattsdev.com/home</link>
    <description>Projects in coding, raspberry pi, linux and more</description>
    <category>Technology</category>
    <item>
      <title>Firefox Web Apps - Plasma Bigscreen</title>
      <link>https://aaronwattsdev.com/projects/firefox-web-apps</link>
      <pubDate>Thu, 22 Aug 2024</pubDate>
      <description>With the introduction of Web Manifest V3, ad blocking in Chromium based browsers is changing. the new limitations and API's for browser extensions means ad blockers, such as Ublock Origin are less effective than they once were. Firefox will still be using Manifest V2 for a while yet, but the fact that Firefox, on the dekstop at least, does not have support for PWA's (progressive web apps) may hinder the user experience for those off us using Plasma Bigscreen as a streaming OS. Luckily, Linux is flexible, and there's an easy way to get Firefox Web Apps.</description>
      <guid>https://aaronwattsdev.com/projects/firefox-web-apps</guid>
      <content:encoded>b'\n&lt;h1&gt;Firefox Web Apps - Plasma Bigscreen&lt;/h1&gt;\n&lt;time datetime="2024-08-22"&gt;22&lt;sup&gt;nd&lt;/sup&gt; August, 2024&lt;/time&gt;\n&lt;img alt="A Raspberry Pi 4 running KDE Plasma Bigscreen on a\n        HD TV, firefox browser, aniwave and amazon prime are listed\n        in the recent apps list" src="/images/projects/firefox-web-apps.jpg"/&gt;\n&lt;p id="intro"&gt;\n            With the introduction of Web Manifest V3, ad blocking in\n            Chromium based browsers is changing. the new limitations\n            and API\'s for browser extensions means ad blockers, such\n            as Ublock Origin are less effective than they once were.\n            Firefox will still be using Manifest V2 for a while yet,\n            but the fact that Firefox, on the dekstop at least, does\n            not have support for PWA\'s (progressive web apps) may\n            hinder the user experience for those off us using Plasma\n            Bigscreen as a streaming OS. Luckily, Linux is flexible,\n            and there\'s an easy way to get Firefox Web Apps.\n        &lt;/p&gt;\n&lt;p&gt;\n            Web Apps on Linux are not new, and while it would be time\n            consuming, you could potentially just right your own\n            dekstop files to open specified url\'s in their own\n            windows. Thankfully, Linux Mint\'s Web Apps software has\n            been ported over to the Raspberry Pi, so we can get set\n            up with Firefox PWA\'s pretty quickly, and without fuss.\n        &lt;/p&gt;\n&lt;aside&gt;\n            NOTE: This guide is for installing Firefox PWA\'s on a \n            Raspberry Pi device running KDE Plasma Bigscreen, find \n            out how to get Bigscreen running on a Pi\n            &lt;a href="/projects/kde-plasma-bigscreen"&gt;here&lt;/a&gt;.\n        &lt;/aside&gt;\n&lt;h2 id="firefox"&gt;Firefox on Pi&lt;/h2&gt;\n&lt;p&gt;\n            Raspberry Pi OS used to ship with Chromium as it\'s\n            default browser, and while the Ubuntu image for\n            Rapsberry Pi delivered decent performance with Firefox,\n            it did tend to struggle on Raspberry Pi OS. These issues\n            appear to have been fixed, and you can now select\n            Firefox or Chromium as the default browser when setting\n            up the desktop. The Raspberry Pi Foundation has even\n            included their own Firefox extension, called\n            &lt;code&gt;UANaughtyList&lt;/code&gt;, that simply changes the\n            user agent to improve the experience on Youtube and\n            Netflix (you &lt;em&gt;ARE&lt;/em&gt; naughty, Youtube and Netflix!).\n        &lt;/p&gt;\n&lt;p&gt;\n            To install Firefox on Raspberry Pi OS with the necessary\n            extensions, open terminal in type the following:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt update\nsudo apt install firefox rpi-firefox-mods&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="install"&gt;Installation&lt;/h2&gt;\n&lt;p&gt;\n            Installation is pretty simple, but you will want the\n            flexibility of multiple windows, so first log out of\n            the Bigscreen session, and log in to the Plasma desktop\n            session before starting.\n        &lt;/p&gt;\n&lt;p&gt;\n            To install Linux Mint\'s Web Apps software, we first need\n            to install &lt;a href="https://pi-apps.io/" target="_blank"&gt;Pi-Apps&lt;/a&gt;. Installing Pi-Apps is simple\n            enough and can be done with one line in the terminal:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;wget -qO- https://raw.githubusercontent.com/Botspot/pi-apps/master/install | bash&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Once Pi-Apps is installed, open it, and install \n            &lt;code&gt;Web Apps&lt;/code&gt; from the &lt;code&gt;Internet&lt;/code&gt;\n            category in the software list.\n        &lt;/p&gt;\n&lt;h2 id="webapps"&gt;Setting Up Web Apps&lt;/h2&gt;\n&lt;p&gt;\n            Setting up web apps is easy. Just open the Web Apps\n            software and click &lt;code&gt;+&lt;/code&gt; to create a new app.\n            Give the app a name, and enter the url. Once you have\n            typed the url, there is a button next to the field that\n            will scrape the url for favicons that you can use as the\n            apps icon on the dekstop. It\'s success rate for finding\n            favicons is extremely good, but not quite 100%, so you\n            may occasionally need to download the icon and set it\n            manually.\n            You can choose which web browser to launch a specific\n            application in, so if a site struggles in firefox, you\n            can select a different browser for that particular\n            application.\n        &lt;/p&gt;\n&lt;p&gt;\n            That\'s all there is to it. After setting up your web\n            apps, simply log back into the Bigscreen session and\n            enjoy your favourite shows.\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/firefox-web-apps.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/firefox-web-apps.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/firefox-web-apps.jpg" />
    </item>
    <item>
      <title>Google Calendar API - Apps Script</title>
      <link>https://aaronwattsdev.com/projects/google-calendar-appscript-api</link>
      <pubDate>Fri, 21 Jun 2024</pubDate>
      <description>Considering how long they've been around, working with iCal's in the browser is surprisingly difficult. When working with data from Google Calendar, we can use Google's Apps Script to create an API, that will let us pull exactly what we desire down from a Google Calendar.</description>
      <guid>https://aaronwattsdev.com/projects/google-calendar-appscript-api</guid>
      <content:encoded>b'\n&lt;h1&gt;Google Calendar API - Apps Script&lt;/h1&gt;\n&lt;time datetime="2024-06-21"&gt;21&lt;sup&gt;st&lt;/sup&gt; June, 2024&lt;/time&gt;\n&lt;img alt="Screenshot of calendar entries displayed in HTML\n        on a web page." src="/images/projects/google-calendar-appscript-api.jpg"/&gt;\n&lt;p id="intro"&gt;\n            Considering how long they\'ve been around, working with\n            iCal\'s in the browser is surprisingly difficult. When\n            working with data from Google Calendar, we can use\n            Google\'s Apps Script to create an API, that will let us\n            pull exactly what we desire down from a Google Calendar.\n        &lt;/p&gt;\n&lt;p&gt;\n            There is actually a great JavaScript module called\n            &lt;a href="https://github.com/kewisch/ical.js/" target="_blank"&gt;ical.js&lt;/a&gt;, but as I write this in June\n            2024 it seems to be broken. At first I thought it may be\n            that Google had decided not to play nice, and changed their\n            iCal format, but upon testing other ics files from other\n            services, I was getting the same errors from the module\n            I had built from source, as well as on various iCal JS\n            validators online. So hopefully this reaches someone in\n            a similar situation that I found myself in.\n        &lt;/p&gt;\n&lt;h2 id="use-case"&gt;Use Case&lt;/h2&gt;\n&lt;p&gt;\n            A good static website should require as little work as\n            possible, and that work should be as accessible as\n            possible. I was making a static website, intended to show\n            upcoming events for a youth group. Youth workers aren\'t\n            necessarily techno-literate, and probably don\'t have a\n            lot of time to do that kind of stuff anyway. So, I\n            decided that the website should just update itself via\n            a Google Calendar - easy! Or at least that\'s what I\n            thought.\n        &lt;/p&gt;\n&lt;p&gt;\n            Aside from iCalJS, which I\'ve already mentioned, the only\n            really easy option here, at least to my knowledge, is to use\n            an iFrame which Google provides in it\'s calendar settings\n            and sharing options. But those things are ugly. Butt ugly.\n            I\'ve used Apps Script in the past to serve a web app\n            designed just to do some very basic bookings management\n            using a Google Sheet as the backend - roll your eyes if\n            you must, but it worked and best of all it was free. So if\n            you can serve HTML via Google\'s Apps Script service, then\n            you should be able to serve some json data too, right?\n        &lt;/p&gt;\n&lt;h2 id="serving-json"&gt;Serving JSON&lt;/h2&gt;\n&lt;p&gt;\n            You &lt;em&gt;can&lt;/em&gt; serve JSON using Google\'s Apps Script\n            service. But, you can only access it in a Chromium type\n            browser - it just won\'t work in firefox, and CORS makes\n            it virtually impossible to work with in a static site.\n        &lt;/p&gt;\n&lt;p&gt;\n            To serve HTML web apps or JSON, you need to use the\n            &lt;a href="https://developers.google.com/apps-script/guides/content" target="_blank"&gt;Apps Script Content Service&lt;/a&gt;. They do\n            also have a third option in that, which is called JSONP.\n            You\'re not alone if you\'ve never heard of that, I hadn\'t\n            either. It stands for JSON with Padding, and wikipedia\n            describes it as\n        &lt;/p&gt;\n&lt;blockquote&gt;\n            .. a historical JavaScript technique for requesting data\n            by loading a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, which is\n            an element intended to load ordinary javascript.\n        &lt;/blockquote&gt;\n&lt;p&gt;\n            That sounds both fun and dangerous! Sensibly, Google issues\n            a warning for when working with JSONP:\n        &lt;/p&gt;\n&lt;blockquote&gt;\n            Warning: Be very careful when using this JSONP technique\n            in your scripts. Because it\'s possible for anyone to embed\n            the script tag in their web page, you can be tricked into\n            executing the script when you visit a malicious website,\n            which can then capture the data returned. Best practice is\n            to ensure that JSONP scripts are read-only and only return\n            non-sensitive information.\n        &lt;/blockquote&gt;\n&lt;p&gt;\n            The script I am making will only be returning GET requests\n            with information that is on a public Google calendar, so\n            for me at least, it\'s safe to go on..\n        &lt;/p&gt;\n&lt;h2 id="api"&gt;Creating the API&lt;/h2&gt;\n&lt;p&gt;\n            To begin, in your Google Drive, select &lt;em&gt;New&lt;/em&gt;, then\n            &lt;em&gt;More&lt;/em&gt;, and if &lt;em&gt;Google Apps Script&lt;/em&gt; isn\'t\n            already on that menu, you will need to choose\n            &lt;em&gt;Connect More Apps&lt;/em&gt; and choose Apps Script from\n            there.\n        &lt;/p&gt;\n&lt;p&gt;\n            To use the Apps Script Content Service, you need a\n            function called &lt;code&gt;doGet&lt;/code&gt;, which will send the\n            data we want to receive from our API as JSON content.\n            That function needs to return a\n            &lt;code&gt;ContentService&lt;/code&gt; class instance, with the\n            method &lt;code&gt;createTextOutput&lt;/code&gt; specifying the\n            JSON data we wish to return, here being our &lt;code&gt;res&lt;/code&gt;\n            (or &lt;code&gt;response&lt;/code&gt;) object. And finally, we need\n            to also invoke the &lt;code&gt;setMimeType&lt;/code&gt; method,\n            and set it to JAVASCRIPT, so it returns as JSONP, instead\n            of JSON.\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;const doGet = () =&amp;gt; {\n    const holidayHoursCalID = \'&amp;lt;calendar-id&amp;gt;@group.calendar.google.com\';\n    const eventsCalID = \'&amp;lt;calendar-id&amp;gt;@group.calendar.google.com\';\n\n    const res = {\n        \'data\': {\n            holidayHours: getEvents(holidayHoursCalID),\n            events: getEvents(eventsCalID),\n        }\n    };\n\n    return ContentService.createTextOutput(JSON.stringify(res))\n        .setMimeType(ContentService.MimeType.JAVASCRIPT);\n};&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            The code I am using to get the calendar info to populate\n            the &lt;code&gt;response&lt;/code&gt; object in &lt;code&gt;doGet&lt;/code&gt;\n            simply takes each calendar\'s ID as a parameter, defines\n            a start datetime (now), and an end (+1 year), and collects\n            and maps the start, end, title and description from\n            each calendar entry that is returned.\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;const getEvents = id =&amp;gt; {\n    const cal = CalendarApp.getCalendarById(id);\n    const start = new Date();\n    const end = new Date();\n    end.setFullYear(end.getFullYear() + 1)\n\n    const calData = cal.getEvents(start, end).map(i =&amp;gt; ({\n        start: i.getStartTime(),\n        end: i.getEndTime(),\n        title: i.getTitle(),\n        description: i.getDescription()\n    }));\n\n    return calData;\n};&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next, we need to deploy the web app. Deploy it as a Web App,\n            not as API executable. You will also need to set the access\n            permissions to &lt;em&gt;Anyone&lt;/em&gt; for it to be accessible\n            wherever you want to call it from. It will provide you with\n            a web app URL, that if you now enter that into your browser,\n            should send you back your JSON data, assuming everyting\'s\n            set up and working correctly. In my case, I receive something\n            like this:\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;"data": {\n    "holidayHours":[\n        {\n            "start":"2024-07-24T23:00:00.000Z",\n            "end":"2024-08-30T23:00:00.000Z",\n            "title":"Summer Holiday",\n            "description":"Open 12 - 6pm everyday (except bank holidays)"\n        },\n        {\n            "start":"2024-08-25T23:00:00.000Z",\n            "end":"2024-08-26T23:00:00.000Z",\n            "title":"Bank holiday",\n            "description":"CLOSED"\n        }\n    ],\n    "events":[\n        {\n            "start":"2024-06-20T23:00:00.000Z",\n            "end":"2024-06-21T23:00:00.000Z",\n            "title":"Pride event",\n            "description":"An art workshop for Pride!"\n        },\n        {\n            "start":"2024-07-06T15:00:00.000Z",\n            "end":"2024-07-06T17:00:00.000Z",\n            "title":"CLT event",\n            "description":"A community art project:\\n\\"Postcards From Our Future\\""\n        }\n    ]\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;aside&gt;\n            NOTE: You will need to update the url in your API call\n            whenever you make changes to the API and redeploy.\n        &lt;/aside&gt;\n&lt;h2 id="api-call"&gt;Calling the API From a Webpage&lt;/h2&gt;\n&lt;p&gt;\n            So this method is free. It works, but you get what you\n            pay for, and we can\'t always be sure it will work every\n            time that it\'s called. There are limits on how many Apps\n            Script calls can be made, so if the tik tok web crawler\n            takes an interest in the web page this is being called\n            from, things are going to break. With this in mind, I\n            opted to use the (very ugly) iFrames as a fallback, in\n            case for whatever reason the API call is unable to fetch\n            data I need. It is likely that I will monitor the situation\n            with iCalJS, and if that ends up working at some point,\n            that will become my first port of call, with this Apps\n            Script API becoming a fallback for &lt;em&gt;that&lt;/em&gt;, and the\n            iFrames becoming a final fallback if all else fails.\n        &lt;/p&gt;\n&lt;p&gt;\n            I\'m not going to go through the in\'s and out\'s of\n            formatting Date objects and manipulating the DOM, so you\n            will have to design your own calendar entry cards or\n            calendar table or however you want to display the data.\n            Instead, I will just look at calling the API itself, and\n            having the iFrames as a fallback.\n        &lt;/p&gt;\n&lt;p&gt;\n            I\'m using an async function, to call the &lt;code&gt;fetch&lt;/code&gt;\n            method on the URL provided for the Apps Script API that I\'ve\n            set up. Apps Script calls work by being redirected by the\n            content service itself, so be sure to include\n            &lt;code&gt;redirect: \'follow\'&lt;/code&gt; as an option.\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;const getEvents = async () =&amp;gt; {\n    const res = await fetch(\n        \'https://script.google.com/macros/s/&amp;lt;script-url&amp;gt;/exec\',\n        {\n            redirect: \'follow\'\n        }\n    );\n\n    const { data } = await res.json();\n    return data;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Finally, we just need to call that &lt;code&gt;getEvents&lt;/code&gt;\n            function that returns the JSON data, and do something\n            with the data. I am only logging to the console in this\n            example. There are checks to see if there are events or not,\n            and then it is wrapped in a &lt;code&gt;try&lt;/code&gt; statement, so\n            if the API call fails, then the iFrames can be initiated\n            within the &lt;code&gt;catch&lt;/code&gt; statement. This entire\n            process gets initiated within a &lt;code&gt;DOMContentLoaded&lt;/code&gt;\n            event listener, which, in my opinion, is good practise most\n            of the time when working with the DOM in JavaScript.\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;const populateLists = async () =&amp;gt; {\n    try {\n        const data = await getEvents();\n        const { events, holidayHours } = data;\n\n        if (events.length) {\n            events.forEach(event =&amp;gt; {\n                console.log(event);\n            });\n        } else {\n            console.log(\'No events information available\');\n        };\n        \n        if (holidayHours.length) {\n            holidayHours.forEach(event =&amp;gt; {\n                console.log(event);\n            });\n        } else {\n            console.log(\'No holiday information available\');\n        };\n    } catch (e) {\n        const eventFrame = `&amp;lt;iframe&amp;gt;COPY AND PASTED FROM GOOGLE&amp;lt;/iframe&amp;gt;`;\n        const termDateFrame = `&amp;lt;iframe&amp;gt;COPY AND PASTED FROM GOOGLE&amp;lt;/iframe&amp;gt;`;\n        eventList.innerHTML = eventFrame;\n        termDatesList.innerHTML = termDateFrame;\n    }\n};\n\ndocument.addEventListener(\'DOMContentLoaded\', populateLists)&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="hide-url"&gt;Hiding your script URL&lt;/h2&gt;\n&lt;p&gt;\n            Having your Apps Script url in your JavaScript file on\n            a static website leaves it in plain view of anyone who\n            knows how to get to it. To be able to use it in a\n            website, we have had to allow access to it by anyone,\n            so it is potentially open to being spammed by anyone\n            who just plain doesn\'t like you. But, certain static\n            website hosting providers, do provide serverless\n            functions, which can allow us to call the script URL\n            discreetly from a psuedo backend. I will be using\n            &lt;a href="https://www.netlify.com/" target="_blank"&gt;Netlify&lt;/a&gt;. Although there is still\n            an API link in our frontend JavaScript that could still\n            potentially be spammed, it is a Netlify link, rather\n            than a Google macro, which will give us a little\n            extra in terms of load balancing and spamming\n            protection. Other providers often offer Lambda\n            Functions within their services, much to the same\n            affect as Netlify\'s functions.\n        &lt;/p&gt;\n&lt;p&gt;\n            To begin, we will need to create a &lt;code&gt;.env&lt;/code&gt;\n            file in the root of our webpage directory - but don\'t\n            worry, we don\'t need the dotenv node module here, so\n            no need to initialise a node project - it is however\n            worth running &lt;code&gt;npm i -g netlify-cli&lt;/code&gt; for\n            testing purposes. In the\n            &lt;code&gt;.env&lt;/code&gt; file, we do the usual, and list\n            our &lt;em&gt;secret&lt;/em&gt; with a key and value.\n        &lt;/p&gt;\n&lt;aside&gt;\n            NOTE: If the script url has been published in a public\n            repo or file, it may be best to create a new script\n            deployment and archive the old one.\n        &lt;/aside&gt;\n&lt;pre class="language-none"&gt;&lt;code&gt;APPS_SCRIPT="https://script.google.com/macros/s/&amp;lt;script-url&amp;gt;/exec"&lt;/code&gt;&lt;/pre&gt;\n&lt;aside&gt;\n            NOTE: Make sure to add the dotenv file to .gitignore\n            if you haven\'t already got in in your global gitignore\n            config.\n        &lt;/aside&gt;\n&lt;p&gt;\n            In your Netlify project, you will also set this as an\n            environment variable. Now, to create the netlify\n            function, we need to create a &lt;code&gt;netlify&lt;/code&gt;\n            directory, and a &lt;code&gt;functions&lt;/code&gt; directory\n            within that. Any JavaScript files within the\n            &lt;code&gt;functions&lt;/code&gt; directory will be treated as\n            a backend API url.\n        &lt;/p&gt;\n&lt;pre class="language-none"&gt;&lt;code&gt;/\nindex.html\nassets/\n    ...\nnetlify/\n    functions/\n        api.js&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            For our API function, we just need to export one\n            default function, that takes &lt;code&gt;request&lt;/code&gt;\n            and &lt;code&gt;context&lt;/code&gt; parameters, and returns\n            a &lt;code&gt;Response&lt;/code&gt; instance. This will be viewable\n            if your project repo is public, but by using the\n            &lt;code&gt;Netlify.env.get()&lt;/code&gt; method, we can collect\n            our secret from the dotenv file in development, and\n            from the Netlify environment variable we\'ve already\n            set up while in production.\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;export default async (req, context) =&amp;gt; {\n    const api = Netlify.env.get(\'APPS_SCRIPT\');\n    \n    const res = await fetch(api, {\n        redirect: \'follow\'\n    });\n    const { data } = await res.json();\n\n    return new Response(JSON.stringify(data));\n};&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Now that we have done that, we just need to update the api\n            call in our &lt;code&gt;app.js&lt;/code&gt; file on the frontend\n            to reflect the changes. URL\'s for netlify functions\n            read as\n            &lt;code&gt;&amp;lt;project-url&amp;gt;/.netlify/functions/&amp;lt;file-name&amp;gt;&lt;/code&gt;.\n            Note that the &lt;code&gt;.js&lt;/code&gt; file extension is not\n            included in the url. Once that is completed, just\n            push the project, and you\'re done!\n        &lt;/p&gt;\n&lt;pre class="language-javascript"&gt;&lt;code&gt;const getEvents = async () =&amp;gt; {\n    const res = await fetch(\'/.netlify/functions/api\');\n\n    const data = await res.json();\n\n    return data;\n}&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="google"&gt;A Quick Word About Google&lt;/h2&gt;\n&lt;p&gt;\n            I\'m not here to say Google is good or bad, it offers\n            amazing services - a lot of them for free. But it is\n            a very big entity. There\'s loads of amazing developers\n            there that clearly have a passion for delivering\n            fantastic products and services for people. And then\n            there\'s also, well, all the other stuff. But politics\n            aside, you ought to know that as an entity, Google can\n            be fickle, and a service that exists today, could cease\n            to exist tomorrow. There\'s even been some really popular\n            and succesful services that have just been cut, seemingly\n            overnight and for no reason - check out the Google Graveyard\n            at &lt;a href="https://killedbygoogle.com/" target="_blank"&gt;Killed by Google&lt;/a&gt; to see for yourself.\n            So while they can offer great solutions to those of us\n            working on a tight budget, it\'s important to recognise\n            that they are under no obligation to do so, and that we\n            won\'t always have the same solutions available to us\n            tomorrow.\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/google-calendar-appscript-api.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/google-calendar-appscript-api.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/google-calendar-appscript-api.jpg" />
    </item>
    <item>
      <title>Static Website - Github Pages</title>
      <link>https://aaronwattsdev.com/projects/github-pages-static-website</link>
      <pubDate>Sun, 09 Jun 2024</pubDate>
      <description>You don't always need a full stack. When all you need to do is show information, a static website is enough. And with Github Pages, it is possible to have a fully functioning website for free, just like this one! It could just be the perfect solution for your portfolio page.</description>
      <guid>https://aaronwattsdev.com/projects/github-pages-static-website</guid>
      <content:encoded>b'\n&lt;h1&gt;Static Website - Github Pages&lt;/h1&gt;\n&lt;time datetime="2024-06-09"&gt;9&lt;sup&gt;th&lt;/sup&gt; June, 2024&lt;/time&gt;\n&lt;img alt="The google search home page with your name here written\n        in the query input" src="/images/projects/github-pages-static-website.jpg"/&gt;\n&lt;p id="intro"&gt;\n            You don\'t always need a full stack. When all you need to\n            do is show information, a static website is enough. And\n            with Github Pages, it is possible to have a fully\n            functioning website for free, just like this one! It could\n            just be the perfect solution for your portfolio page.\n        &lt;/p&gt;\n&lt;p&gt;\n            In fact, in 2024, static sites can do a bit more than just\n            send information. This site, for example, has a \n            &lt;a href="#comment-section"&gt;comment section&lt;/a&gt; on each\n            project page (scroll down and see for yourself). There\'s\n            an oceans-worth of webdev lessons and tutorials out there,\n            but not many really talk about getting the site up, and\n            indexed. So instead of talking about how to code a website,\n            I thought I\'d go over some of the things I\'ve learned in \n            building this website and getting it bing-ready, as well\n            as some of the interesting things you can get working on\n            static websites today.\n        &lt;/p&gt;\n&lt;h2 id="cms"&gt;Why Not a CMS?&lt;/h2&gt;\n&lt;p&gt;\n            Good question. You can absolutely use a Content Management\n            System. Github Pages even has one incorporated into it, \n            it\'s called\n            &lt;a href="https://jekyllrb.com/" target="_blank"&gt;Jekyll&lt;/a&gt;.\n            But I had a very specific vision for my website. Story time.\n        &lt;/p&gt;\n&lt;p&gt;\n            I bought my domain name a while ago. I had been learning\n            web development, and thought I might like to do it\n            professionally. And so, naturally I would need an online\n            portfolio. Eventually, I changed my mind, and decided that\n            I prefer to play with mono fonts as a hobby, so I scrapped\n            that idea. But I kept the domain name, just in case I\n            decided I might eventually want to do something with it.\n            And I did, I\'m doing it now, it\'s this site. Anyway, when\n            I was learning all these amazing CSS and Javascript spells\n            and incantations, two things would often happen. The first\n            was that more\n            code would lead to more bugs, and the other thing was that\n            I was never satisified with a project. I would always want\n            to improve or fix something, and nothing ever got finished.\n        &lt;/p&gt;\n&lt;p&gt;\n            Then I came across a website, just some\n            &lt;a href="https://motherfuckingwebsite.com/" target="_blank"&gt;motherfucking website&lt;/a&gt;, and I realised\n            then, that less is more. When I decided I wanted to build\n            this website to log my projects, I decided I wanted it to\n            follow those design principles (or lack there of). In\n            doing very little, I wanted to acheive a responsive,\n            hierarchical website that just worked everywhere, and\n            loaded up &lt;em&gt;fast&lt;/em&gt;. You don\'t get that with CMS\'s.\n            And to that end, I use very little javascript on this site\n            (even though I love javascript), it highlights my syntax,\n            runs a filter feature on the home page, and runs the\n            comments sections on these projects pages. I don\'t import\n            fonts, and as much as possible is hosted in the website\n            itself. The only external service is the comments because,\n            well, static.\n        &lt;/p&gt;\n&lt;p&gt;\n            So, to keep to those design principles, I\'ve opted to do\n            everything myself (and also because I enjoy coding).\n            Although, that doesn\'t mean things have to be difficult\n            either. After looking at the things you need to get done\n            to pass the bing test, we will take a look at automating\n            some of the tedious stuff with python scripts.\n        &lt;/p&gt;\n&lt;h2 id="github-pages"&gt;Github Pages&lt;/h2&gt;\n&lt;p&gt;\n            So, assuming you\'ve got a basic website built and ready\n            to go, you will need somewhere to serve the files from.\n            I\'m not savvy enough to want to brave self hosting on\n            a home server, so I opted for\n            &lt;a href="https://pages.github.com/" target="_blank"&gt;Github Pages&lt;/a&gt;. \n            If you\'re here reading this, then chances are you either\n            have a github account, or are familiar with the git CLI.\n            Github Pages websites are free, though there are\n            limitations to them, but for a portfolio page, a blog,\n            or documentation it is ideal.\n        &lt;/p&gt;\n&lt;p&gt;\n            There are 2 different types of github pages websites.\n            The first is the user/organisation site. This will\n            give you a url in the format\n            &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;, which, in\n            itself is pretty tidy as far as free url\'s go. You will \n            be able to use advanced DNS configuration with a DNS \n            provider such as namecheap if you go this route, meaning\n            it will be much easier to set up with search engines.\n            The second is a project site. Although trickier, it is\n            still possible to set up a custom domain in this case, \n            and without advanced DNS configuration, setting up with\n            search engines will involve adding meta tags into the\n            site headers for verification.\n        &lt;/p&gt;\n&lt;h2 id="custom-domain"&gt;Custom Domain Name&lt;/h2&gt;\n&lt;p&gt;\n            You don\'t need a custom domain name. But with a DNS\n            provider, such as\n            &lt;a href="https://www.namecheap.com/" target="_blank"&gt;namecheap&lt;/a&gt;,\n            you get the benefit of advnaced DNS configuration,\n            making it far easier to set up SEO, using CNAME and\n            txt records, instead of uglying up your code with\n            unnecessary meta tags. Also, &lt;code&gt;&amp;lt;yourname&amp;gt;.com&lt;/code&gt;\n            looks far nicer, and more professional, than\n            &lt;code&gt;&amp;lt;yourname&amp;gt;.github.io&lt;/code&gt;. The process for getting\n            custom domains set up for user and organisation\n            pages is pretty thoroughly documented by gihtub\n            &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site" target="_blank"&gt;here&lt;/a&gt;. For project pages, there is a solution\n            that worked for me over at Stack Overflow\n            &lt;a href="https://stackoverflow.com/a/9123911" target="_blank"&gt;here&lt;/a&gt;.\n        &lt;/p&gt;\n&lt;h2 id="bing"&gt;Getting Bing Ready&lt;/h2&gt;\n&lt;p&gt;\n            Okay, so Bing is not the only search engine. But\n            out of Bing and Google, Bing is definitely the\n            hard-arse parent that isn\'t goint to tolerate any\n            slack from you. Google is quite lax, provided your\n            url\'s are all correct and your site is verified.\n            But Bing runs a number of tests and won\'t index\n            if your site fails them. The only other remaining\n            &lt;em&gt;pure search engines&lt;/em&gt; remaining today,\n            might be Yahoo and DuckDuckGo, but both of those\n            pull indexes off of Bing, so through the hoops\n            we jump. There may well be more issues than what\n            I bring up here, but assuming you\'re starting\n            with something like the emmet boilerplate, you\n            shouldn\'t run in to too many more than I did.\n        &lt;/p&gt;\n&lt;h3&gt;H1\'s&lt;/h3&gt;\n&lt;p&gt;\n            They tried to tell you. You didn\'t listen.\n            Semantics is important. But you kept following\n            those CSS guru\'s on youtube like they were bitches\n            on heat. Now all you know about web dev is how to\n            nest spans in divs in spans in divs to make a\n            sidemenu icon change shape when the menu is hidden.\n        &lt;/p&gt;\n&lt;p&gt;\n            Bing wants to see a h1 on every page. Be smart and\n            use it on the &lt;em&gt;main title&lt;/em&gt; of the \n            &lt;em&gt;relevant content&lt;/em&gt; of each page. I didn\'t\n            really see the need for one on my\n            &lt;a href="/" target="_blank"&gt;splash page&lt;/a&gt;, but Bing flagged it, so I had to\n            put one in and cancel the styling on it.\n        &lt;/p&gt;\n&lt;h3&gt;Alt-txt&lt;/h3&gt;\n&lt;p&gt;\n            Yes, semantics is important. And yes, I regularly\n            forget to put the alt-txt on images. Oh, fine. I\n            just don\'t bother, I remember and then decide I\'m\n            too lazy to do it. Anyway, Bing pulled me on it,\n            and now I try to be a good web dev.\n        &lt;/p&gt;\n&lt;h3&gt;Meta Description&lt;/h3&gt;\n&lt;p&gt;\n            SEO has changed over the years, and search engines\n            rely less on the meta tags in html headers than they\n            used to. However, Bing still wants a meta desription\n            tag, it won\'t index a page without one. You can throw\n            in the meta keywords lists and all other bells and\n            whistles if you wish, but just make sure the description\n            is in their, as it seems to be the one Bing cares about.\n        &lt;/p&gt;\n&lt;h3&gt;Favicon&lt;/h3&gt;\n&lt;p&gt;\n            Technically, this wasn\'t really an obstacle to getting\n            indexed, but it is rumoured that it can improve your\n            ranking in search engines, and it also get\'s rid of that\n            annoying console warning. Easiest way, use one of the\n            &lt;a href="https://favicon.io/" target="_blank"&gt;favicon.io&lt;/a&gt;\n            favicon generators, and they will not only render all\n            the files required for it, but they\'ll also provide the\n            markup for the headers, as well as a\n            &lt;code&gt;site.webmanifest&lt;/code&gt; file for android users to\n            be able to create shortcuts on their homescreen of your\n            website - just don\'t forget to update the name and\n            short name values in that file before pushing.\n        &lt;/p&gt;\n&lt;h2 id="sitemap"&gt;Sitemap&lt;/h2&gt;\n&lt;p&gt;\n            There are two main types of sitemap. The first is \n            html sitemaps, intended for users, but search engines\n            can also crawl them to find links to all the pages on\n            your site. The second is xml sitemaps, which you can\n            submit directly to search engines, so they have an\n            immediate directory of your sites urls.\n        &lt;/p&gt;\n&lt;p&gt;\n            Creating a html sitemap isn\'t too difficult if you\n            have already managed to code a static website, so\n            I\'ll look at the xml sitemap, as there\'s a bit to\n            learn with xml if you haven\'t used it much before.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: If your site is only one page, you do not need any\n            sitemaps.\n        &lt;/aside&gt;\n&lt;p&gt;\n            The sitemap xml file isn\'t too complicated, and is a\n            good thing to look at before moving onto RSS feeds,\n            which are similar but have a fair bit more going on\n            to them. Let\'s take a look at the sitemap for this\n            website, and then break it down:\n        &lt;/p&gt;\n&lt;pre class="language-html"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;\n&amp;lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/home/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/projects/gpicase/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/projects/kde-plasma-bigscreen/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/projects/media-keyboard/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/projects/pi5-desktop/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n    &amp;lt;url&amp;gt;\n        &amp;lt;loc&amp;gt;https://aaronwattsdev.com/projects/retropie-nespi-4/&amp;lt;/loc&amp;gt;\n    &amp;lt;/url&amp;gt;\n&amp;lt;/urlset&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            This should all look a little familiar if you\'ve ever\n            played around with svg\'s in the browser, as it\'s the\n            same type of markup. The first line is just stating\n            which version of xml and encoding the document is using.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            The next line is the opening tag for the root element,\n            &lt;code&gt;&amp;lt;urlset&amp;gt;&lt;/code&gt;. It\'s what it sounds like, a set of\n            url\'s.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&amp;gt;\n    &amp;lt;!-- urls go here --&amp;gt;\n&amp;lt;/urlset&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Nested within the &lt;code&gt;&amp;lt;urlset&amp;gt;&lt;/code&gt; element are the\n            &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; elements, one for each page in your\n            website that you wish to be known to a search engines\n            crawler. Nested within each &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;\n            element, should be the information about each url.\n            &lt;code&gt;&amp;lt;loc&amp;gt;&lt;/code&gt; contains the url itself,\n            and is the only tag that\'s required within the\n            &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; tag,\n            but you can check what other tags can be included by\n            checking the protocol documenation at \n            &lt;a href="https://sitemaps.org/protocol.html" target="_blank"&gt;sitemap.org&lt;/a&gt;.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;url&amp;gt;\n    &amp;lt;loc&amp;gt;https://aaronwattsdev.com/&amp;lt;/loc&amp;gt;\n&amp;lt;/url&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            A CMS would write these out for you, and doing them\n            by hand can become a bit boring, and also prone to\n            human error, so we will take a look at writing\n            scripts to build these xml files for us shortly.\n            But first, let\'s look at the rss feed.\n        &lt;/p&gt;\n&lt;h2 id="feed"&gt;RSS Feed&lt;/h2&gt;\n&lt;p&gt;\n            So, the following xml file contains the bare minimum for\n            an rss feed to function in most readers. The required elements\n            are all there. We can add more for a far better experience,\n            but already, it is quite a bit to write each time you want\n            to add to the feed. Further, all the required information\n            can be gathered from within our project in some way, so\n            before we flesh this file out to be a better feed, we would\n            be foolish not to get some kind of automation set up to do\n            this for us.\n        &lt;/p&gt;\n&lt;p&gt;\n            But first, let\'s have a quick look at what we have so far:\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;\n&amp;lt;rss version="2.0"&amp;gt;\n    &amp;lt;channel&amp;gt;\n        &amp;lt;title&amp;gt;AaronWattsDev Projects&amp;lt;/title&amp;gt;\n        &amp;lt;link&amp;gt;https://aaronwattsdev.com/home&amp;lt;/link&amp;gt;\n        &amp;lt;description&amp;gt;Projects in coding, raspberry pi, linux and more&amp;lt;/description&amp;gt;\n        &amp;lt;item&amp;gt;\n            &amp;lt;title&amp;gt;Raspberry Pi 5 - Desktop Computer&amp;lt;/title&amp;gt;\n            &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/pi5-desktop&amp;lt;/link&amp;gt;\n            &amp;lt;description&amp;gt;This is less of a guide, and more just an outline of how, and why, I\'m doing it. As well as a review of how it\'s going. It\'s not here as clickbait, you might not want to do it yourself, but I\'m here to say that it\'s working for me.&amp;lt;/description&amp;gt;\n        &amp;lt;/item&amp;gt;\n        &amp;lt;item&amp;gt;\n            &amp;lt;title&amp;gt;KDE Plasma Bigscreen - Raspberry Pi 4&amp;lt;/title&amp;gt;\n            &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/kde-plasma-bigscreen&amp;lt;/link&amp;gt;\n            &amp;lt;description&amp;gt;I built this media centre at the start of 2024. There may be easier methods of installation by now. When I built this project, existing guides mentioned an installation image on KDE\'s bigscreen page, however, it doesn\'t seem to exist currently, except for a manjaro image, and I prefer to stick to Raspberry Pi\'s own debian OS when I can, especially that it ensures the best compatibility with things like cases and accessories.&amp;lt;/description&amp;gt;\n        &amp;lt;/item&amp;gt;\n        &amp;lt;item&amp;gt;\n            &amp;lt;title&amp;gt;RetroPie - RetroFlag NesPi 4 Case&amp;lt;/title&amp;gt;\n            &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/retropie-nespi-4&amp;lt;/link&amp;gt;\n            &amp;lt;description&amp;gt;The Raspberry Pi 4, with Retroflag\'s NesPi 4 Case, running RetroPie is the ultimate retro gaming rig. Lower power consumption? Check. Light gun games? You got it. Great customisation options? Of course. Did you know you can even use a wiimote as the stylus for the Drastic Nintendo DS Emulator?? Did I hear someone say Wario Ware?&amp;lt;/description&amp;gt;\n        &amp;lt;/item&amp;gt;\n        &amp;lt;item&amp;gt;\n            &amp;lt;title&amp;gt;Media Keyboard - Pico Controller&amp;lt;/title&amp;gt;\n            &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/media-keyboard&amp;lt;/link&amp;gt;\n            &amp;lt;description&amp;gt;My keyboard doesn\'t include the media keys, so I built a macro keyboard to control the media on my desktop computer. It is plug\'n\'play and requires no configuration to work between different devices. The project can be easily tweaked to program macro\'s for work, steam games, and whatever else you can\'t be bothered to type out manually.&amp;lt;/description&amp;gt;\n        &amp;lt;/item&amp;gt;\n        &amp;lt;item&amp;gt;\n            &amp;lt;title&amp;gt;GPi Case 2 - Compute Module 4&amp;lt;/title&amp;gt;\n            &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/gpicase&amp;lt;/link&amp;gt;\n            &amp;lt;description&amp;gt;The GPi Case 2 with Raspberry Pi\'s Compute Module 4 is the ultimate portable gaming device. The case offers amazing functionality, and when combined with a CM4 and 64-bit Recalbox, there is little that can challenge it for a portable retro gaming experience.&amp;lt;/description&amp;gt;\n        &amp;lt;/item&amp;gt;\n    &amp;lt;/channel&amp;gt;\n&amp;lt;/rss&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            So, ignoring the first line, that is the same as the\n            sitemap xml file, we can see that the root element in\n            the rss feed is the &lt;code&gt;&amp;lt;rss&amp;gt;&lt;/code&gt; element.\n            The rss version is specified as an attribute, it is\n            using rss 2.0. Within that, is the nested \n            &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; element. Inside of the\n            &lt;code&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; element, we have the feed\n            information: &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;,\n            &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and\n            &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;. This all provides\n            the rss aggregators with the information they need about\n            the channel itself.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;rss version="2.0"&amp;gt;\n    &amp;lt;channel&amp;gt;\n        &amp;lt;title&amp;gt;AaronWattsDev Projects&amp;lt;/title&amp;gt;\n        &amp;lt;link&amp;gt;https://aaronwattsdev.com/home&amp;lt;/link&amp;gt;\n        &amp;lt;description&amp;gt;Projects in coding, raspberry pi, linux and more&amp;lt;/description&amp;gt;\n        &amp;lt;!-- rss items go here --&amp;gt;\n    &amp;lt;/channel&amp;gt;\n&amp;lt;/rss&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Finally, we have the rss items themselves. These each\n            consist of an &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; element, with a\n            nested &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;,\n            &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;\n            element each. What\'s helpful about these elements, is the\n            information they require are all available on this sites\n            &lt;a href="/home"&gt;home page&lt;/a&gt;, where each project is listed\n            with links and descriptions. This will come in handy in a\n            when we automate the feed.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;item&amp;gt;\n    &amp;lt;title&amp;gt;Raspberry Pi 5 - Desktop Computer&amp;lt;/title&amp;gt;\n    &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/pi5-desktop&amp;lt;/link&amp;gt;\n    &amp;lt;description&amp;gt;This is less of a guide, and more just an outline of how, and why, I\'m doing it. As well as a review of how it\'s going. It\'s not here as clickbait, you might not want to do it yourself, but I\'m here to say that it\'s working for me.&amp;lt;/description&amp;gt;\n&amp;lt;/item&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="automating"&gt;Automating the Boring Stuff&lt;/h2&gt;\n&lt;p&gt;\n            One of the main benefits of using a CMS, is that you\n            don\'t have to do, or even think about, most of this\n            stuff. Not only is ammending the sitemap and rss feed\n            another job that can be time consuming, forgotten,\n            or even done wrong, but it\'s also not necessary.\n            Even without a CMS, we can make our own lives easier\n            with a bit of messy hacking. First let\'s handle the\n            easy one, which is the sitemap. But before we begin,\n            it\'s worth mentioning that a sensible directory\n            structure will help a lot with automation, and that\n            what I write here isn\'t necessarily going to work for\n            your own sites structure, so you will need to hack\n            around with it yourself to get it working for you.\n            I will talk about the structure I use and how it\n            affects or benefits the scripts I\'m writing for\n            reference.\n        &lt;/p&gt;\n&lt;h3&gt;A Sitemap Generator in Python&lt;/h3&gt;\n&lt;p&gt;\n            So the sitemap is essentially just a set of links\n            to each html page in the website. Easy, my site\n            only has two folders containing any html files at\n            all, that\'s the &lt;code&gt;root/&lt;/code&gt; and\n            &lt;code&gt;projects/&lt;/code&gt; directories.\n        &lt;/p&gt;\n&lt;pre class="language-none"&gt;&lt;code&gt;/\nindex.html\nhome.html\nprojects/\n    gpicase.html\n    kde-plasma-bigscreen.html\n    media-keyboard.html\n    pi5-desktop.html\n    retropie-nespi-4.html\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            With this in mind, all we need to do, is build a\n            &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; element for each file,\n            append it to the root element, and then write it to\n            a file. We can use the &lt;code&gt;os&lt;/code&gt; module to\n            probe our filesystem, and the\n            &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; module parses\n            and writes xml. Both are included in python3.\n        &lt;/p&gt;\n&lt;p&gt;\n            The following snippet will build a root element,\n            and then append a subelement to it, and fill out\n            the text. We also have to register the xml\n            namespace we will be using &lt;em&gt;before&lt;/em&gt; we make\n            the root element, and set the namespace on the root\n            element after we have created it, not doing so\n            will result in &lt;code&gt;ns0&lt;/code&gt; inserting itself\n            within all the following elements down the tree.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;import xml.etree.ElementTree as ET\n\n# create the root element and set namespace\nET.register_namespace(\'\', \'http://www.sitemaps.org/schemas/sitemap/0.9\')\nurlset = ET.Element(\'urlset\')\nurlset.set(\'xmlns\', \'http://www.sitemaps.org/schemas/sitemap/0.9\')\n\n# append a subelement to the root element\nurl = ET.SubElement(urlset, \'url\')\nloc = ET.SubElement(url, \'loc\')\nloc.text = \'https://aaronwattsdev.com/\'&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            We are going to have to build a lot more url\'s,\n            so that may as well be extracted out to a function.\n            We will pass the file&lt;em&gt;path&lt;/em&gt; to it as a\n            parameter, and use it to build the url itself.\n            We will also set the default path param to an empty\n            string, for when we need to build the index url.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;def build_url(path=\'\'):\n    url = ET.SubElement(urlset, \'url\')\n    loc = ET.SubElement(url, \'loc\')\n    loc.text = f\'{root_url}{path}\'&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            I\'m going to keep the script simple, and just\n            call the two files in the root directory\n            directly, as I don\'t expect these to change any\n            time soon. But the projects directory is likely\n            to have new files going into it regularly, so\n            for that, I will use the &lt;code&gt;os&lt;/code&gt; python\n            module to iterate through these files, and\n            call the build file function, passing the filename with\n            the &lt;code&gt;.html&lt;/code&gt; extension truncated off.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;build_url()\nbuild_url(\'home/\')\n\nfor filename in os.listdir(\'projects/\'):\n    build_url(f\'{filename[:-5]}/\')&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Finally, we just need to declare the element\n            tree, indent it for readability, and write it\n            to &lt;code&gt;sitemap.xml&lt;/code&gt;. We can define the\n            xml version and encoding in the write function.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;tree = ET.ElementTree(urlset)\nET.indent(tree)\ntree.write(\'sitemap.xml\', xml_declaration=\'version\', encoding=\'UTF-8\')&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            A quick look at the finished script and you will\n            see I have stored the base url as a string, to help\n            in the build url function. It only gets used on the\n            one line within the function, but it makes it easier\n            to change later if we need to by declaring it at the\n            start of the script\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;import os\nimport xml.etree.ElementTree as ET\n\nroot_url = \'https://aaronwattsdev.com/\'\n\ndef build_url(path=\'\'):\n    url = ET.SubElement(urlset, \'url\')\n    loc = ET.SubElement(url, \'loc\')\n    loc.text = f\'{root_url}{path}\'\n\nET.register_namespace(\'\', \'http://www.sitemaps.org/schemas/sitemap/0.9\')\nurlset = ET.Element(\'urlset\')\nurlset.set(\'xmlns\', \'http://www.sitemaps.org/schemas/sitemap/0.9\')\n\nbuild_url()\nbuild_url(\'home/\')\n\nfor filename in os.listdir(\'projects/\'):\n    build_url(f\'{filename[:-5]}/\')\n\ntree = ET.ElementTree(urlset)\nET.indent(tree)\ntree.write(\'sitemap.xml\', xml_declaration=\'version\', encoding=\'UTF-8\')&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;A Simple RSS Generator in Python&lt;/h3&gt;\n&lt;p&gt;\n            There is a bit more to do in this script. As well as\n            url\'s for each page, we will need a title and a\n            description for each project. Well, that all exists\n            in &lt;code&gt;/home.html&lt;/code&gt;, and we can use the\n            python &lt;code&gt;bs4&lt;/code&gt;, a.k.a. Beautiful Soup,\n            module to read and parse the html file, and extract\n            all the data we need.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Beautiful Soup is not a built-in python module, and\n            will need to be installed, along with a parser. For\n            more information check the\n            &lt;a href="https://beautiful-soup-4.readthedocs.io/en/latest/#installing-beautiful-soup" target="_blank"&gt;documentation&lt;/a&gt;.\n        &lt;/aside&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;from bs4 import BeautifulSoup\n\nwith open(\'home.html\') as f:\n    txt = f.read()\n    soup = BeautifulSoup(txt, \'lxml\')\n\nprojects = soup.select(\'.project\')\n\nfor project in projects:\n    title = project.select_one(\'h2\').text\n    link = project.select_one(\'a\')[\'href\']\n    description = project.select_one(\'.description\').text&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            The next step is to build the xml. Which is\n            essentially the same process as with the sitemap,\n            however the elements are a little more complex\n            for the rss elements.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;import xml.etree.ElementTree as ET\nfrom bs4 import BeautifulSoup\n\n# strings for the channel information\nbase_url = \'https://aaronwattsdev.com\'\ntitle_text = \'AaronWattsDev Projects\'\ndescription_text = \'Projects in coding, raspberry pi, linux and more\'\n\n# build a single element\n# params: parent, type, text\n# returns: element\ndef build_element(el_parent, el_type, el_text=\'\'):\n    element = ET.SubElement(el_parent, el_type)\n    # leaves text blank if empty\n    if len(el_text):\n        element.text = el_text\n    return element\n\n# build rss item element\n# params: title, link, description\ndef build_item(title, link, description):\n    link_text = f\'{base_url}{link}\'\n    rss_item = build_element(rss_channel, \'item\')\n    build_element(rss_item, \'title\', title)\n    build_element(rss_item, \'link\', link_text)\n    # join and split to remove excess whitespace from html formatting\n    build_element(rss_item, \'description\', \' \'.join(description.split()))\n\n# make root element\nrss = ET.Element(\'rss\')\nrss.set(\'version\', \'2.0\')\n\n# append channel element and append channel details\nrss_channel = build_element(rss, \'channel\')\nbuild_element(rss_channel, \'title\', title_text)\nbuild_element(rss_channel, \'link\', f\'{base_url}/home\')\nbuild_element(rss_channel, \'description\', description_text)\n\n# make soup\nwith open(\'home.html\') as f:\n    txt = f.read()\n    soup = BeautifulSoup(txt, \'lxml\')\n\n# parse projects from soup and build rss items with data\nprojects = soup.select(\'.project\')\nfor project in projects:\n    title = project.select_one(\'h2\').text\n    link = project.select_one(\'a\')[\'href\']\n    description = project.select_one(\'.description\').text\n    build_item(title, link, description)\n\n# build and write xml tree\ntree = ET.ElementTree(rss)\nET.indent(tree)\ntree.write(\'rss.xml\', xml_declaration=\'version\', encoding=\'UTF-8\')\n    &lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;A Better RSS Feed&lt;/h3&gt;\n&lt;p&gt;\n            We have the basics now for a working RSS feed,\n            but loaded up into an aggregator, it looks a little\n            empty compared to other RSS feeds out there. There\n            are a few tweaks we can make to the feed to improve\n            it. By including the atom namespace and an\n            &lt;code&gt;&amp;lt;atom:link&amp;gt;&lt;/code&gt; element in the channel, we\n            can increase the rss feed\'s compatibility with\n            more aggregators. We can also use\n            &lt;code&gt;&amp;lt;enclosure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;media&amp;gt;&lt;/code&gt;\n            elements to include images in the rss feed. A\n            &lt;code&gt;&amp;lt;guid&amp;gt;&lt;/code&gt; element can help aggregators\n            work out if it has already received an item or\n            not. And some aggregators use the\n            &lt;code&gt;&amp;lt;category&amp;gt;&lt;/code&gt; element to categorise\n            feeds.\n        &lt;/p&gt;\n&lt;p&gt;\n            There are other elements you can include, such as\n            dates for updates and published, but I am not yet\n            including this information in articles, I may\n            implement it in the near future. Check the\n            rssboard &lt;a href="https://www.rssboard.org/media-rss" target="_blank"&gt;media-rss documentation&lt;/a&gt; for\n            more quality-of-life elements around media.\n        &lt;/p&gt;\n&lt;pre class="language-xml"&gt;&lt;code&gt;&amp;lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&amp;gt;\n&amp;lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"&amp;gt;\n    &amp;lt;channel&amp;gt;\n    &amp;lt;atom:link href="https://aaronwattsdev.com/feed.xml" rel="self" type="applications/rss+xml" /&amp;gt;\n    &amp;lt;title&amp;gt;AaronWattsDev Projects&amp;lt;/title&amp;gt;\n    &amp;lt;link&amp;gt;https://aaronwattsdev.com/home&amp;lt;/link&amp;gt;\n    &amp;lt;description&amp;gt;Projects in coding, raspberry pi, linux and more&amp;lt;/description&amp;gt;\n    &amp;lt;category&amp;gt;Technology&amp;lt;/category&amp;gt;\n    &amp;lt;item&amp;gt;\n        &amp;lt;title&amp;gt;Raspberry Pi 5 - Desktop Computer&amp;lt;/title&amp;gt;\n        &amp;lt;link&amp;gt;https://aaronwattsdev.com/projects/pi5-desktop&amp;lt;/link&amp;gt;\n        &amp;lt;description&amp;gt;This is less of a guide, and more just an outline of how, and why, I\'m doing it. As well as a review of how it\'s going. It\'s not here as clickbait, you might not want to do it yourself, but I\'m here to say that it\'s working for me.&amp;lt;/description&amp;gt;\n        &amp;lt;guid&amp;gt;https://aaronwattsdev.com/projects/pi5-desktop&amp;lt;/guid&amp;gt;\n        &amp;lt;enclosure url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" length="0" type="image/jpeg" /&amp;gt;\n        &amp;lt;media:thumbnail url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" width="1920" height="1080" /&amp;gt;\n        &amp;lt;media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" /&amp;gt;\n    &amp;lt;/item&amp;gt;\n    &amp;lt;/channel&amp;gt;\n&amp;lt;/rss&amp;gt;&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            My design choices and project structure have\n            influenced how I have written the script to collect\n            all the required information to build the individual\n            rss items. For example, I don\'t have any image links\n            on the page I am scraping on - I just didn\'t want\n            the page to have to load an image for every article.\n            However, I have only one image per article, and\n            each image has the same filename as the html file\n            it\'s associated with. So by knowing the page url,\n            the script can easily decipher the image url that\'s\n            associated with it.\n        &lt;/p&gt;\n&lt;pre class="language-none"&gt;&lt;code&gt;/\nindex.html\nhome.html\nprojects/\n    gpicase.html\n    kde-plasma-bigscreen.html\n    ...\nimages/\n    projects/\n        gpicase.jpg\n        kde-plasma-bigscreen.jpg&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            A different solution here could be to include a\n            hidden element in each project on the home page\n            that lists them, with innertext that defines\n            an image url. Here is the final script for\n            generating a more complex rss feed, there\'s\n            a lot happening, but broken down, it\'s not too\n            different from the simple rss script, it just\n            has more jobs to do now:\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;import xml.etree.ElementTree as ET\nfrom bs4 import BeautifulSoup\n\nbase_url = \'https://aaronwattsdev.com\'\ntitle_text = \'AaronWattsDev Projects\'\ndescription_text = \'Projects in coding, raspberry pi, linux and more\'\n\n# builds a basic xml element, populates text, and appends to specified parent\ndef build_element(el_parent, el_type, el_text=\'\'):\n    element = ET.SubElement(el_parent, el_type)\n    if len(el_text):\n        element.text = el_text\n    return element\n\n# builds a rss item from scraped project data\ndef build_item(title, link, description):\n    link_text = f\'{base_url}{link}\'\n    rss_item = build_element(rss_channel, \'item\')\n    build_element(rss_item, \'title\', title)\n    build_element(rss_item, \'link\', link_text)\n    build_element(rss_item, \'description\', \' \'.join(description.split()))\n    build_element(rss_item, \'guid\', link_text)\n    build_media(rss_item, link)\n\n# called by build_item: builds complex media elements and appends to item parent\ndef build_media(el_parent, el_link):\n    img_link = f\'{base_url}/images{el_link}.jpg\'\n    enclosure = ET.SubElement(el_parent, \'enclosure\')\n    enclosure.set(\'url\', img_link)\n    enclosure.set(\'length\', \'0\')\n    enclosure.set(\'type\',\'image/jpeg\')\n    media_thumbnail = ET.SubElement(el_parent, \'media:thumbnail\')\n    media_thumbnail.set(\'url\', img_link)\n    media_thumbnail.set(\'width\', \'1920\')\n    media_thumbnail.set(\'height\', \'1080\')\n    media_content = ET.SubElement(el_parent, \'media:content\')\n    media_content.set(\'type\', \'image/jpeg\')\n    media_content.set(\'url\', img_link)\n\n# Declare XML namespaces to be used\nET.register_namespace(\'\', \'http://www.w3.org/2005/Atom\')\nET.register_namespace(\'\', \'http://search.yahoo.com/mrss/\')\n\n# create root rss element and set attributes\nrss = ET.Element(\'rss\')\nrss.set(\'version\', \'2.0\')\nrss.set(\'xmlns:atom\', \'http://www.w3.org/2005/Atom\')\nrss.set(\'xmlns:media\', \'http://search.yahoo.com/mrss/\')\n\n# add necessary child elements to root element and set attributes if required\nrss_channel = build_element(rss, \'channel\')\natom_link = ET.SubElement(rss_channel, \'atom:link\')\natom_link.set(\'href\', f\'{base_url}/feed.xml\')\natom_link.set(\'rel\', \'self\')\natom_link.set(\'type\', \'applications/rss+xml\')\nbuild_element(rss_channel, \'title\', title_text)\nbuild_element(rss_channel, \'link\', f\'{base_url}/home\')\nbuild_element(rss_channel, \'description\', description_text)\nbuild_element(rss_channel, \'category\', \'Technology\')\n\n# parse contents of home.html\nwith open(\'home.html\') as f:\n    txt = f.read()\n    soup = BeautifulSoup(txt, \'lxml\')\n\n# create and populate an item element for each project\nprojects = soup.select(\'.project\')\nfor project in projects:\n    title = project.select_one(\'h2\').text\n    link = project.select_one(\'a\')[\'href\']\n    description = project.select_one(\'.description\').text\n    build_item(title, link, description)\n\n# build and write the tree\ntree = ET.ElementTree(rss)\nET.indent(tree)\ntree.write(\'feed.xml\', xml_declaration=\'version\', encoding=\'UTF-8\')&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;Further Automation&lt;/h3&gt;\n&lt;p&gt;\n            We could expand on this even further. The list of\n            projects in &lt;code&gt;home.html&lt;/code&gt; could, with not\n            much more work than we\'ve already done, be generated\n            from the files in the &lt;code&gt;projects/&lt;/code&gt;\n            directory. Right now I haven\'t implemented published\n            dates for each article, and so I unless I handle it\n            another way, articles will become listed in alphabetical\n            order, and I think I would prefer to have newest appear\n            first. We could even strip away the repeated code from\n            each project page, such as the headers, links and style\n            tags, and have Beautiful Soup build the pages from\n            very simple hmtl pages that only contain the article\n            information, the way the Jekyll builds from markdown\n            files, but as we are working directly in html, we would\n            have far more control over CSS and JavaScript. Then, after\n            that, I\'m not really sure what a CMS could offer that we\n            haven\'t already just done ourselves. These\n            are things I hope to look at in the near future, but for\n            now, I can feel my pigments fading and I would like to\n            go out into the sunlight for a while, so let\'s start\n            wrapping this up.\n        &lt;/p&gt;\n&lt;h3&gt;Index Page Generator&lt;/h3&gt;\n&lt;p&gt;\n            Eagle eyed readers may have noticed that I have, in fact,\n            added published dates to the projects on this site. I\n            did also write a script that takes the exisiting projects\n            and generates content within the &lt;code&gt;home.html&lt;/code&gt;\n            page where the full list of projects currently lives.\n            It was not an incredibly complex script either.\n        &lt;/p&gt;\n&lt;p&gt;\n            Using the Beautiful Soup Python module, the script crawls\n            through the &lt;code&gt;projects&lt;/code&gt; directory, and scrapes\n            the relevant data required to make project summaries and\n            links. And, thanks to the power of Beautiful Soup, we can\n            work with the html much like we would with the DOM, and\n            instead of rewriting the entire page, we can simply just\n            rewrite the contents of the element that contains the\n            full list of projects, which in my case, is the\n            &lt;code&gt;main&lt;/code&gt; element.\n        &lt;/p&gt;\n&lt;pre class="language-python"&gt;&lt;code&gt;from bs4 import BeautifulSoup\nimport os\nfrom datetime import date\n\nprojects = []\n\n# crawl projects folder\nfor f in os.scandir(\'projects\'):\n    path_name = f\'projects/{f.name}\'\n    with open(path_name) as projectf:\n        project_txt = projectf.read()\n        project_soup = BeautifulSoup(project_txt, \'lxml\')\n    # scrape the relevant data\n    title = project_soup.select_one(\'h1\').text\n    intro = project_soup.select_one(\'p#intro\').text\n    description = \' \'.join(intro.split())\n    html_date = project_soup.select_one(\'time\')\n    project_date = date.fromisoformat(html_date[\'datetime\'])\n    keywords = project_soup.select_one(\'meta[name=keywords]\')[\'content\'].split(\',\')\n    keywords = [kw.lstrip() for kw in keywords]\n    \n    projects.append({\n        \'title\' : title,\n        \'description\' : description,\n        \'keywords\' : keywords,\n        \'date\' : project_date,\n        \'datehtml\' : html_date,\n        \'link\': f\'/{path_name[:-5]}\'\n    })\n\n# callback function to organise into order of date\ndef date_sort(e):\n    return e[\'date\']\n\n# sort projects by date - newest first\nprojects.sort(reverse=True, key=date_sort)\n\nwith open(\'home.html\') as inf:\n    txt = inf.read()\n    soup = BeautifulSoup(txt, \'lxml\')\n\n# select and clear main element\nmain_element = soup.select_one(\'main\')\nmain_element.clear()\n\n# for each project, create and add the relevant html to the main element\nfor project in projects:\n    project_div = soup.new_tag(\'div\')\n    project_div[\'class\'] = \'project\'\n    project_header = soup.new_tag(\'h2\')\n    project_header.string = project[\'title\']\n    project_div.append(project_header)\n    project_date = soup.new_tag(\'time\', datetime=project[\'datehtml\'][\'datetime\'])\n    project_date.string = project[\'datehtml\'].text\n    project_div.append(project_date)\n    project_ul = soup.new_tag(\'ul\')\n    project_ul[\'class\'] = \'topic-container\'\n    for topic in project[\'keywords\']:\n        topic_li = soup.new_tag(\'li\')\n        topic_li[\'class\'] = \'topic\'\n        topic_li.string = topic\n        project_ul.append(topic_li)\n    project_div.append(project_ul)\n    project_link = soup.new_tag(\'a\', href=project[\'link\'])\n    project_link.string = \'Go to project\'\n    project_div.append(project_link)\n    project_description = soup.new_tag(\'p\')\n    project_description[\'class\'] = \'description\'\n    project_description.string = project[\'description\']\n    project_div.append(project_description)\n    main_element.append(project_div)\n\n# write changes to file home.html\nwith open (\'home.html\', \'w\') as outf:\n    outf.write(BeautifulSoup.prettify(soup))&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="adding-comments-section"&gt;Adding A Comments Section&lt;/h2&gt;\n&lt;p&gt;\n            This wasn\'t something that I was previously aware that\n            you could do with static websites, and I\'m not even sure\n            what first brought my attention to it. But it turns out\n            there are quite a few options here. There seems to an\n            option or two that use github issues to serve the comments,\n            which is actually pretty smart. But the one I chose to go\n            with was &lt;a href="https://cactus.chat/" target="_blank"&gt;Cactus Comments&lt;/a&gt;.\n        &lt;/p&gt;\n&lt;p&gt;\n            Cactus Comments is free, and doesn\'t require users to\n            sign in like the solutions based on github issues.\n            It runs on &lt;a href="https://matrix.org/" target="_blank"&gt;matrix&lt;/a&gt;, which is a defederated chat and\n            messaging service. And I\'m a big fan of defederation.\n            As it runs on matrix, you can use the\n            &lt;a href="https://element.io/" target="_blank"&gt;element&lt;/a&gt; PC and mobile apps to get\n            alerts of, reply to, and moderate comments (there is\n            an arm 64-bit version for linux too, which is great now\n            that I do all of my computing on my raspberry pi 5!).\n        &lt;/p&gt;\n&lt;p&gt;\n            I won\'t explain how to get started, the documentation\n            for cactus is pretty easy to follow. At first look you\'ll\n            wonder if there\'s stuff missing from it, as it all seems\n            too simple, but it really is as simple as it looks!\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/github-pages-static-website.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/github-pages-static-website.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/github-pages-static-website.jpg" />
    </item>
    <item>
      <title>Raspberry Pi 5 - Desktop Computer</title>
      <link>https://aaronwattsdev.com/projects/pi5-desktop</link>
      <pubDate>Fri, 31 May 2024</pubDate>
      <description>This is less of a guide, and more just an outline of how, and why, I'm doing it. As well as a review of how it's going. It's not here as clickbait, you might not want to do it yourself, but I'm here to say that it's working for me.</description>
      <guid>https://aaronwattsdev.com/projects/pi5-desktop</guid>
      <content:encoded>b'\n&lt;h1&gt;Raspberry Pi 5 - Desktop Computer&lt;/h1&gt;\n&lt;time datetime="2024-05-31"&gt;31&lt;sup&gt;st&lt;/sup&gt; May, 2024&lt;/time&gt;\n&lt;img alt="Screenshot of the Raspberry Pi desktop, with a terminal\n            open to neofetch displaying specs, code editor displaying\n            a html file, and a web browser open to onlyoffice document\n            editor, with the contents of this web page written within\n            the editor." src="/images/projects/pi5-desktop.jpg"/&gt;\n&lt;p id="intro"&gt;\n            This is less of a guide, and more just an outline of how,\n            and why, I\'m doing it. As well as a review of how it\'s\n            going. It\'s not here as clickbait, you might not want to\n            do it yourself, but I\'m here to say that it\'s working for\n            me.\n        &lt;/p&gt;\n&lt;p&gt;\n            I know. There are hundreds of articles on this. But they\n            are all out to prove that something is worth doing or not.\n            This isn\'t that. It\'s not hyped up, undeserving praise, nor\n            is it phobic criticism. I have genuinely switched from a\n            &lt;em&gt;classical&lt;/em&gt; desktop computer, to using a Raspberry Pi\n            5, and it works for me. Really well, in fact!\n        &lt;/p&gt;\n&lt;h2 id="why"&gt;But, why?&lt;/h2&gt;\n&lt;p&gt;\n            This might be the wrong question. Maybe, it was more: how?\n            I don\'t work in tech, it\'s just a hobby of mine. Nor do I make\n            heaps of expendable money to blow on tech. My last desktop\n            computer was a Dell Optiplex 3050, with some variant of an\n            intel i5 processor. I found it next to the communal bins\n            outside my flat. There was nothing wrong with it. I adopted\n            it, cleaned it, installed linux, plugged in some additional\n            RAM and it was a great computer. I even found an old AMD\n            graphics card that fit it. It\'s still here, it still works.\n            I was trying out the i3wm community edition of EndeavourOS,\n            and it was great (I love i3wm!). There was an update a little\n            while ago to lightDM, the login manager for that flavour of\n            EndeavourOS. I fixed it on my laptop at work, which also runs\n            the same flavour distro, but I suppose the graphics card in\n            my desktop means there\'s extra steps to take for the desktop,\n            I dunno, I still haven\'t looked yet. But I also didn\'t want\n            to lose some files from my SSD, so I\'ve left it on the shelf\n            until I can be bothered to sort that out. What\'s important\n            about that story, is it broke in the morning, as I was\n            about to begin the work I do as my job for the day. I didn\'t\n            have anything else on hand to do my job, and I needed to\n            clock in soon. As luck would have it, my Macbook Pro 2012\'s\n            keyboard had just degraded beyond the point of no return a\n            week or two prior, which left me a little stuck.\n        &lt;/p&gt;\n&lt;p&gt;\n            What I &lt;em&gt;did&lt;/em&gt; have, was a Raspberry Pi 4 on my desk.\n            Yes, I know, this is about Raspberry Pi 5, I will get to that.\n            Anyway, we\'ve all seen the misleading videos on youtube that\n            make sponsor-bucks by luring viewers into assuming that a\n            pi 4 will run as their daily driver and get the job done.\n            I know better than to rely on it. But for my job, which is\n            mostly emails, documents, spreadsheets, and some databases\n            that look like they were designed to run in internet explorer,\n            it seemed like it might be enough to get through the day.\n            So I powered up my pi 4, and did my job. And, it worked. I\n            mean, it was a little slower than I was used to, and it did\n            struggle a little at times, but I got everything done that\n            I needed to. And then a few days later, while I was working\n            and my trusty pi 4 was ticking along shouldering its load,\n            I got a notification that the pi 5 was now in stock. I bought\n            my pi 5, from my pi 4. Neat.\n        &lt;/p&gt;\n&lt;p&gt;\n            My pi 4 got reassigned, and I set up the 5 with the new version\n            of the argon one case and an M.2. NVME SSD drive, and just ..\n            carried on working.\n        &lt;/p&gt;\n&lt;h2 id="good-enough"&gt;Is it good enough?&lt;/h2&gt;\n&lt;p&gt;\n            Yes. I mean, for me, it is. I won\'t lie, pi 4 can get the job\n            done. But it suffers while it does it, and at the end of the\n            day, it goes home, falls straight to sleep, all the while\n            growing more and more distant from it\'s wife and children.\n            The pi 5, on the other hand, doesn\'t yet comprehend the\n            evils and injustices of the world, and has enough ambition\n            and energy to perform at it\'s tasks, and get to live a\n            good quality of life at the end of the day too.\n        &lt;/p&gt;\n&lt;p&gt;\n            What do you want it to do? Personally, I use my pi for the\n            work I\'ve already mentioned, some coding, and projects and\n            nerdery. I\'m not trying to game on it, I\'m not trying to\n            edit videos on it. Though, there is evidence on youtube\n            that it can actually do the latter to an acceptable standard!\n            There are, naturally, some hurdles involved with integrating\n            a linux device into a world that doesn\'t even know it\'s name.\n            And too, the ARM architecture causes one or two nags here and\n            there. But things are improving, all the time, and for my use\n            case, I\'ve been able to get everything running in a way that\n            causes me no hinderence, to the point that this is now the\n            only computer on my desk.\n        &lt;/p&gt;\n&lt;p&gt;\n            One huge win over using a more typical device, is the\n            electricity usage. It uses almost none. I leave this pi, and\n            another that I use specifically as a web radio and music\n            streaming device running volumio, both running all day long.\n            All day. It uses less electric than making toast in the toaster\n            ONCE. I shit you not. If you care about the environment or the\n            energy crisis, that should make you happy. But if like me,\n            you are more concerned with keeping your pockets lined with\n            copper, then you should also get a kick out of that too.\n        &lt;/p&gt;\n&lt;h2 id="setup"&gt;My set up&lt;/h2&gt;\n&lt;h3&gt;Operating System and Desktop Environment&lt;/h3&gt;\n&lt;p&gt;\n            I went with Raspberry Pi OS. I haven\'t changed the desktop\n            environment at all. It defaults to wayland, I\'ve looked at\n            the X desktop, but I\'ve found no real reason to switch yet.\n            Wayland has an issue with the system tray icons, KDE Connect\n            and Nextcloud don\'t appear up there, but that hasn\'t bothered\n            me so far. This flavour of LXDE isn\'t the most modern looking,\n            and changing it takes a lot more work than I\'m willing to\n            invest. But there is a charm to the default pi desktop, and\n            it\'s fun to see the little changes here and there as they\n            continue to work on it. Besides, how much time do you spend\n            really looking at your desktop and the window textures once\n            an app is open?\n        &lt;/p&gt;\n&lt;p&gt;\n            You could no doubt choose a more modern looking OS. But pi\'s\n            own OS does everything well enough for me, and as usual I get\n            the best possible compatibility with accessories, as well as\n            having the best operating system possible for when I work on\n            my projects.\n        &lt;/p&gt;\n&lt;h3&gt;Software&lt;/h3&gt;\n&lt;p&gt;\n            Nextcloud and KDE Connect both work, and are both available\n            in the apt repo\'s, which is great. For\n            writing code I use\n            &lt;a href="https://vscodium.com/#install-on-debian-ubuntu-deb-package"&gt;VSCodium&lt;/a&gt;, which is an opensource version of VSCode,\n            and has a lot of the same extensions available for it. There\n            is a VSCode in apt, but it is from Microsofts repo, so aside\n            from installing bloat, some people may not like that.\n        &lt;/p&gt;\n&lt;p&gt;\n            LibreOffice is a great office suite, and I genuinely love it.\n            However, everyone where I work is inside of the Microsoft\n            ecosystem, and LibreOffice doesn\'t always play well with\n            Microsoft Office. In my experience, OnlyOffice integrates\n            very well with the Microsoft Suite, and I\'ve been able to\n            collaborate with my colleagues with virtually no issues at\n            all using it. But. And it\'s a big but. It\'s not compatible\n            with ARM architecture. All is not lost, however, as OnlyOffice\n            is integrated into Nextcloud, so you can use it online with\n            any Nextcloud provider, or even your own.\n        &lt;/p&gt;\n&lt;p&gt;\n            Everything else I do is online. Most of my work apps refuse\n            to work in aything besides chrome or edge, so I just use\n            chromium for work, and I have firefox for play time. There\n            isn\'t much else for me to say on software. I live a simple\n            life, do I not?\n        &lt;/p&gt;\n&lt;h3&gt;Peripherals&lt;/h3&gt;\n&lt;p&gt;\n            One thing I do have to do online, a lot more often than I\n            would like to, is conference calls. My employer uses MS\n            Teams, which is a resource hog, and has caused many of my\n            intel devices to struggle and stutter. I am, however, pleased\n            to say that the pi 5 handles these calls with grace. Of\n            course, you don\'t get a webcam or microphone built into a\n            raspberry pi, and plug and play compatibility on any linux\n            device can be shaky at best if you aren\'t prepared to do\n            an extensive amount of research. If you want to get going\n            quickly here, then I have reccomendations.\n        &lt;/p&gt;\n&lt;p&gt;\n            The microphone I am using is a &lt;a href="https://www.amazon.co.uk/SAMSON-30-10004-Samson-SAMTR-Microphone/dp/B004J3X47A/" target="_blank"&gt;Samson Meteor Mic&lt;/a&gt;, it is a 1950\'s style,\n            chrome studio microphone that is genuine plug and play\n            on linux. I just plugged it in and it worked flawlessly.\n            It features a hard mute button, as well as a headphone\n            port, for when you need to drown out some background\n            noise in order to hear the meeting.\n        &lt;/p&gt;\n&lt;p&gt;\n            A microphone is the minimum you need to take part in an\n            online meeting, so that\'s sorted. But people might start\n            to talk about you if you are the only one that never turns\n            your camera on.\n            I\'m not saying affordable plug and play webcams for linux\n            don\'t exist, but if they do, I haven\'t been able to find\n            them. Searching for linux webcam on amazon did get me a\n            result, but when I plugged it in, there were hoops to\n            jump through, and then a setting in the cheese application\n            broke it. But, for what I think is a fairly reasonable\n            price, you can pick up a Raspberry Pi Zero 2, and a\n            Raspberry Pi Camera Module 3, and put together your own\n            truly plug and play webcam by following\n            &lt;a href="https://www.raspberrypi.com/tutorials/plug-and-play-raspberry-pi-usb-webcam/" target="_blank"&gt;this actually quite simple tutorial&lt;/a&gt;.\n            The Camera 3 Module actually yields pretty good\n            camera quality as far as webcams go. And also, with chrome\n            and ribbon cables all over your desk, you do start to feel\n            pretty darn cyberpunk!\n        &lt;/p&gt;\n&lt;h2 id="youtube"&gt;Youtube&lt;/h2&gt;\n&lt;p&gt;\n            I suppose we do have to talk about it. It\'s the real question,\n            after all, isn\'t it? Yes. It\'s watchable. I can run youtube\n            on fullscreen in chromium, at 1080p 60fps. It drops some frames,\n            but in my opinion, it\'s completely watchable. Running it 720p\n            60fps drops very few frames at all. But, if running youtube on a\n            raspberry pi is all that\n            matters to you, then you should maybe look at installing android\n            on a raspberry pi instead.\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/pi5-desktop.jpg" />
    </item>
    <item>
      <title>GPi Case 2 - Compute Module 4</title>
      <link>https://aaronwattsdev.com/projects/gpicase</link>
      <pubDate>Sun, 28 Apr 2024</pubDate>
      <description>The GPi Case 2 with Raspberry Pi's Compute Module 4 is the ultimate portable gaming device. The case offers amazing functionality, and when combined with a CM4 and 64-bit Recalbox, there is little that can challenge it for a portable retro gaming experience.</description>
      <guid>https://aaronwattsdev.com/projects/gpicase</guid>
      <content:encoded>b'\n&lt;h1&gt;GPi Case 2 - Compute Module 4&lt;/h1&gt;\n&lt;time datetime="2024-04-28"&gt;28&lt;sup&gt;th&lt;/sup&gt; April, 2024&lt;/time&gt;\n&lt;img alt="GPi Case 2 powered on, showing the recalbox menu screen" src="/images/projects/gpicase.jpg"/&gt;\n&lt;p id="intro"&gt;\n            The GPi Case 2 with Raspberry Pi\'s Compute Module 4 is the\n            ultimate portable gaming device. The case offers amazing\n            functionality, and when combined with a CM4 and 64-bit\n            Recalbox, there is little that can challenge it for a\n            portable retro gaming experience.\n        &lt;/p&gt;\n&lt;p&gt;\n            For this project, I went with a Compute Module 4, with 32Gb\n            eMMC storage, and 4Gb RAM. I also went with no wireless, as\n            this is my portable gaming device, and I don\'t require any\n            online functionality for it. If you\'ve read my NesPi-4 guide,\n            you will know that I prefer RetroPie as my emulationstation\n            frontend, but for this project I went with Recalbox instead.\n            The biggest issue I\'ve had with Recalbox in my Nespi-4 case,\n            was that some updates would break the operating system\n            sligthly. The web UI where you upload your games would stop\n            working, and the shutdown option would disappear from the\n            start menu. But as I don\'t really run this device online,\n            the WebUI isn\'t as much of an issue, and the safe shutdown\n            script for the GPi Case 2 means that the missing option\n            isn\'t really an issue either. Although, I haven\'t really\n            encountered the same glitches when updating Recalbox on this\n            device. Recalbox also has a few features that let it pair\n            extremely well to the GPi Case 2. It is 64-bit, which helps\n            a lot with performance - I haven\'t overclocked it, as there\n            is no cooling inside the case, but I still get great\n            performance when emulating PSX, and it runs Mr. Driller\n            and Volgar the Viking well on the Dreamcast - I haven\'t\n            tried any games more taxing than those though, as it a\n            battery powered device, and working it too hard is going\n            to drain it faster. Recalbox is quite opinionated as far\n            as emulationstation station frontends go, and to my\n            knowledge, there is no way to add new emulators to it,\n            although it does come prepacked with a more than reasonable\n            collection of emulators, as well as lots of homebrew game\n            ROMs, which is a very nice touch!\n        &lt;/p&gt;\n&lt;h2 id="setting-up"&gt;Setting Up&lt;/h2&gt;\n&lt;aside&gt;\n            Note: I use Linux computers only, so these instructions\n            might not be of use to you if you are using Windows or\n            Mac OS.\n        &lt;/aside&gt;\n&lt;p&gt;\n            First you will need to flash Recalbox to the eMMC storage\n            on the compute module 4. Either use the image provided in\n            the Raspberry Pi Imager (Recalbox - Raspberry Pi 4 / 400\n            (64 bits)), or download the image from\n            &lt;a href="https://www.recalbox.com/download/stable/handheld/gpicase2/alternative/" target="_blank"&gt;Recalbox&lt;/a&gt; and install using your software of choice.\n            To install directly onto the CM4\'s flash storage, we will\n            need a piece of software that overrides the boot method\n            on the CM4, and registers the device instead, as a storage\n            device.\n        &lt;/p&gt;\n&lt;p&gt;\n            First, we will need to check that\n            &lt;code&gt;libusb-1.0-0-dev&lt;/code&gt; is installed on your computer\n            that you will be using to flash the CM4. Check using:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;apt list --installed | grep libusb&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n&lt;code&gt;libusb-1.0-0-dev&lt;/code&gt; should be in the list. If it\'s\n            not, then install it using:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install libusb-1.0-0-dev&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next, we need to clone the\n            &lt;a href="https://github.com/raspberrypi/usbboot" target="_blank"&gt;Raspberry Pi USB Boot&lt;/a&gt; repository.\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;git clone --depth=1 https://github.com/raspberrypi/usbboot&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next we need to build the software:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;cd usbboot\nmake&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Now we can run the software:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo ./rpiboot&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Now, plug the GPiCase 2, with compute module 4 board\n            installed, into your PC while the usbboot software is\n            still running. You need to use the micro USB socket on\n            the back of the case, under the cartridge style cover.\n            Now power on the GPi Case 2, and the computer will now\n            recognise the CM4 as a storage device. You can install\n            the image just as you would an SD card.\n        &lt;/p&gt;\n&lt;h2 id="bios"&gt;BIOS\'s&lt;/h2&gt;\n&lt;p&gt;\n            You can get a full set of the RetroPie BIOS\'s at\n            &lt;a href="https://github.com/archtaurus/RetroPieBIOS" target="_blank"&gt;this repo&lt;/a&gt; (if you need help getting\n            BIOS\'s from it, have a look at my\n            &lt;a href="/projects/retropie-nespi-4#bios"&gt;NesPi-4 guide&lt;/a&gt; for instructions).\n            I haven\'t checked every single one,\n            but they should cover most of what you\'ll need for\n            Recalbox. Check where to load each BIOS in the\n            &lt;a href="https://wiki.recalbox.com/en/emulators/consoles/playstation-1/libretro-mednafen_psx" target="_blank"&gt;RecalBox Documentation&lt;/a&gt;. Use the installation\n            instructions described in the next section about ROMs\n            to install BIOS\'s onto the device.\n        &lt;/p&gt;\n&lt;h2 id="roms"&gt;Adding ROMs&lt;/h2&gt;\n&lt;p&gt;\n            I\'m not going to tell you where to get copies of ROMs\n            you already own physical copies of, but if you need\n            help with it, take a look at the\n            &lt;a href="/projects/retropie-nespi-4#games"&gt;Getting Games&lt;/a&gt; section in the Nespi-4 guide.\n            To load the ROMs to CM4, you will need to run the\n            &lt;code&gt;usbboot&lt;/code&gt; software again, as with the\n            installation. Games will need to be loaded onto\n            the &lt;em&gt;Share&lt;/em&gt; partition, check out the\n            &lt;a href="https://wiki.recalbox.com/en/emulators/consoles/playstation-1/libretro-mednafen_psx" target="_blank"&gt;RecalBox docs&lt;/a&gt; for the correct\n            location and formats of ROMs for specific emulators.\n        &lt;/p&gt;\n&lt;h2 id="tweaks"&gt;Tweaks and Polish&lt;/h2&gt;\n&lt;h3&gt;Theme&lt;/h3&gt;\n&lt;p&gt;\n            The &lt;a href="https://github.com/SamYStudiO/es-theme-next-pixel" target="_blank"&gt;Next Pixel&lt;/a&gt; theme is great for the small\n            LCD screen on the GPiCase. It looks great and the font sizes\n            are large enough to be readable. To install just clone the repo\n            to your computer, then drop the folder into the\n            &lt;code&gt;recalbox/themes&lt;/code&gt; folder on the CM4 device.\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;git clone https://github.com/SamYStudiO/es-theme-next-pixel.git&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Then, from the Recalbox start menu, select &lt;em&gt;UI Settings\n            &amp;gt; Theme &amp;gt; Theme Set&lt;/em&gt;, and select the\n            &lt;em&gt;ES-THEME-NEXT-PIXEL-V2-4X4-240P&lt;/em&gt; theme from the menu.\n            I also like to set the &lt;em&gt;On-Screen Help&lt;/em&gt; to off, as\n            the font is so small, and it\'s not hard to memorise the few\n            UI controls.\n        &lt;/p&gt;\n&lt;h3&gt;Other Polish&lt;/h3&gt;\n&lt;p&gt;\n            In the &lt;em&gt;UI Settings &amp;gt; Popup Settings&lt;/em&gt; menu, I set\n            &lt;em&gt;Help Popup Duration&lt;/em&gt; to 1 second, and\n            &lt;em&gt;Music Popup Duration&lt;/em&gt; to 0 seconds to hide music\n            popups.\n        &lt;/p&gt;\n&lt;p&gt;\n            Recalbox menu controls default to a PSX style layout,\n            but as we have a Nintendo style layout, you can also set\n            &lt;em&gt;Swap Validate/Cancel Buttons&lt;/em&gt; in the UI settings\n            to &lt;em&gt;On&lt;/em&gt;.\n        &lt;/p&gt;\n&lt;p&gt;\n            The &lt;em&gt;Start&lt;/em&gt; and &lt;em&gt;Home&lt;/em&gt; buttons are incredibly\n            close together on the GPiCase 2, and if your thumbs are\n            as large as mine, it can be easy to accidentally hit\n            both buttons at once, which happens to be the\n            &lt;em&gt;Exit&lt;/em&gt; hotkey. In &lt;em&gt;Game Settings&lt;/em&gt;, we can\n            set &lt;em&gt;Press Twice To Quit Game&lt;/em&gt; to &lt;em&gt;On&lt;/em&gt;, this\n            will show a popup and require a second press to quit the\n            game - a real frustration saver!\n        &lt;/p&gt;\n&lt;p&gt;\n            To use the scraper, you will need an internet connection.\n            I\'ve found that the easiest way to achieve this, is to plug\n            your phone into the USB-C port at the bottom, using a USB\n            to USB-C adaptor, and use your phones USB hotspot tethering.\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/gpicase.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/gpicase.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/gpicase.jpg" />
    </item>
    <item>
      <title>RetroPie - RetroFlag NesPi 4 Case</title>
      <link>https://aaronwattsdev.com/projects/retropie-nespi-4</link>
      <pubDate>Tue, 23 Apr 2024</pubDate>
      <description>The Raspberry Pi 4, with Retroflag's NesPi 4 Case, running RetroPie is the ultimate retro gaming rig. Low power consumption? Check. Light gun games? You got it. Great customisation options? Of course. Did you know you can even use a wiimote as the stylus for the Drastic Nintendo DS Emulator?? Did I hear someone say Wario Ware?</description>
      <guid>https://aaronwattsdev.com/projects/retropie-nespi-4</guid>
      <content:encoded>b'\n&lt;h1&gt;RetroPie - RetroFlag NesPi 4 Case&lt;/h1&gt;\n&lt;time datetime="2024-04-23"&gt;23&lt;sup&gt;rd&lt;/sup&gt; April, 2024&lt;/time&gt;\n&lt;img alt="A NesPi-4 cased Raspberry Pi 4b, with the slot open\n        to show a NES cartridge style SSD case, an 8BitDo SN30 Pro\n        controller, and a WiiMote in a pistol lightgun adapter." src="/images/projects/retropie-nespi-4.jpg"/&gt;\n&lt;p id="intro"&gt;\n            The Raspberry Pi 4, with Retroflag\'s NesPi 4 Case, running RetroPie\n            is the ultimate retro gaming rig. Low power consumption? Check.\n            Light gun games? You got it. Great customisation options? Of course.\n            Did you know you can even use a wiimote as the stylus for the Drastic\n            Nintendo DS Emulator?? Did I hear someone say Wario Ware?\n        &lt;/p&gt;\n&lt;p&gt;\n            I\'ve gone through a few different renditions of hardware, cases\n            and software for my retrogaming rig. I use Recalbox on a GPi case\n            2 with compute module 4 (no wifi), and have also used it on this\n            device. However, I found myself coming back to RetroPie for the\n            NesPi 4 case and my main rig. Recalbox is certainly a great\n            piece of software, and even has easy set up for the case, however\n            RetroPie just lets you do so much more, and also I found Recalbox\n            to occasionally break after updates - not often, but often enough\n            for me to notice a pattern.\n        &lt;/p&gt;\n&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;\n&lt;p&gt;\n            The NesPi 4 Case gives you the option to use an SSD drive\n            cunningly disguised as a NES cartridge for additional storage.\n            But, given the faster speeds and greater reliability of SSD\n            via USB for the raspberry pi, the smarter play is to boot from\n            it and throw out the SD card. You might need to update EEPROM\n            to get it going, I didn\'t in this case. If you bought the spare\n            &lt;em&gt;cartridge&lt;/em&gt; it comes with a case that lets you plug it\n            into your computer, so do that, and flash a fresh copy of\n            RetroPie to the disk using the Raspberry Pi Imager, or etcher\n            if you so choose. If you didn\'t get the adapter, you will want\n            to dig one out from your drawer of wires, or order one online.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: RetroPie images can be found in the Raspberry Pi Imager, or\n            online at &lt;a href="https://retropie.org.uk/download/"&gt;RetroPie&lt;/a&gt;.\n        &lt;/aside&gt;\n&lt;p&gt;\n            First boot should prompt you to map your gamepad. Once done\n            you can get your pi online and get its IP from the RetroPie\n            menu, and ssh into it to install the NesPi 4 safe shutdown\n            script:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;wget -O - "https://raw.githubusercontent.com/RetroFlag/retroflag-picase/master/install.sh" | sudo bash&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            There\'s plenty of themes and splash screens to choose from,\n            so make the pi yours (I went with a smart looking Nintendo\n            theme and splash myself), and move to the next step when\n            you\'re ready.\n        &lt;/p&gt;\n&lt;h2 id="bios"&gt;BIOS files&lt;/h2&gt;\n&lt;p&gt;\n            So now games? No. Slow down there. Some of the emulators\n            are plug\'n\'play, but for some to run you will need BIOS\'s.\n            As much as I love being told to google it by people in\n            forums, it\'s not helpful, and you can often end up with\n            files that don\'t work. Someone has been kind enough to collate\n            a &lt;a href="https://github.com/archtaurus/RetroPieBIOS"&gt;BIOS set&lt;/a&gt;\n            on github, you can simply copy all contents into\n            your BIOS directory, or copy in as needed.\n        &lt;/p&gt;\n&lt;p&gt;\n            If you\'re not familiar with how git works, and need some\n            extra help just follow the steps below.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: these instructions are assuming you are working on\n            a different device to the pi.\n        &lt;/aside&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;git clone https://github.com/archtaurus/RetroPieBIOS.git\ncd RetroPieBIOS&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Get your pi\'s local IP address, but don\'t SSH in. Either copy\n            the entire BIOS set over, or cherry pick what you need:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;# to copy entire directory\nrsync -r BIOS/ &amp;lt;user&amp;gt;@&amp;lt;ip_address&amp;gt;:~/RetroPie/BIOS\n\n# or to pick out a single file\ncd BIOS\nrsync &amp;lt;bios_file&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;ip_address&amp;gt;:~/RetroPie/BOIS/&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            If that scares yesterdays dinner out of you, then just\n            plug your SSD (or SD card if you are unwilling to take good\n            advice) back into the computer and do it all the old\n            fashioned way.\n        &lt;/p&gt;\n&lt;h2 id="games"&gt;Getting Games&lt;/h2&gt;\n&lt;p&gt;\n            I have no idea if I\'m legally allowed to tell you where to\n            download digital copies of games you already own, but\n            &lt;a href="https://www.techpout.com/safe-rom-sites/"&gt;these guys&lt;/a&gt;\n            don\'t seem to give a toss. There\'s some good sources there.\n            EmuParadise stopped working, but if you install the tampermonkey\n            extension on firefox, the following script adds a workaround\n            which you can &lt;em&gt;right click&lt;/em&gt; and choose &lt;em&gt;save as&lt;/em&gt;\n            to download.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: workaround doesn\'t work when there are multiple download\n            sources on a page - a common thing for Dreamcast images.\n        &lt;/aside&gt;\n&lt;pre&gt;&lt;code class="language-javascript"&gt;// ==UserScript==\n// @name         EmuParadise Download Workaround - 1.1.1\n// @version      1.1.2\n// @description  Replaces the download button link with a working one\n// @author       Eptun\n// @match        https://www.emuparadise.me/*/*/*\n// @require      http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\n// @grant        none\n// ==/UserScript==\n\n(function() {\n    \'use strict\';\n\n    var id = ((document.URL).split("/"))[5];\n    $(".download-link").prepend(\n        `&amp;lt;a target="_blank"\n            href="/roms/get-download.php?gid=`+id+`&amp;amp;test=true"\n            title="Download using the workaround script"\n        &amp;gt;Download using the workaround script&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;`);\n})();&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            To get your games over to your pi, check the\n            &lt;a href="https://retropie.org.uk/docs/"&gt;RetroPie Docs&lt;/a&gt; to\n            make sure that your roms are in the correct format, then copy\n            them over the old fashioned way or with rsync to the correct\n            directory. Otherwise, if you\'re chicken, use USB.\n        &lt;/p&gt;\n&lt;aside&gt;Note: Use the built in scrapers on the RetroPie\n            start menu to get cover art and game descriptions, you might\n            need to run each once to get all your games list done. If some\n            still don\'t work, they may need their file names adjusted in\n            order to be found.\n        &lt;/aside&gt;\n&lt;h2 id="tweaks"&gt;Performance Tweaks&lt;/h2&gt;\n&lt;p&gt;\n            Aside from the obvious performance tweaks (cooling system,\n            overclock, installing the operating system on a SSD or USB),\n            There\'s a few things you can do for emulators which can tend\n            to struggle on a pi 4. You\'re probably not going to like them,\n            but that\'s what you get for not doing an X86 build with a\n            graphics card instead. You pay peanuts, you get 480p.\n        &lt;/p&gt;\n&lt;h3&gt;N64&lt;/h3&gt;\n&lt;p&gt;\n            I\'ve seen a load of tips online on how to imrove N64\n            performance. None of them worked for me. The sad truth is\n            N64 just works the pi too hard. But you can make your games\n            playable by setting the resolution to 480p. Stop complaining,\n            if you plugged a real N64 into your TV you think you\'re going\n            to get better resolution?\n        &lt;/p&gt;\n&lt;p&gt;\n            Launch a game, and interrupt the runcommand dialog by pressing\n            A, choose &lt;em&gt;Select video mode for lr-mupen64plus-next&lt;/em&gt;,\n            and scroll down and select\n            &lt;em&gt;720x480@60Hz 16:9 (27.03Mhz, nhsync, nvsync, driver)&lt;/em&gt;.\n            This fixed all the graphical and audio glitches for me, and now\n            I can play Banjo Kazooie and Ocarina of Time and enjoy them.\n            Granted the trophy overlays look like shit, but this is the\n            dirty world of emulation, pirates aren\'t known for being clean.\n        &lt;/p&gt;\n&lt;h3&gt;Dreamcast&lt;/h3&gt;\n&lt;p&gt;\n            If, like me, you bought a lot of the indie games by the likes\n            of NG:Dev.Team, Red Spot and HuCast, then those bad boys are\n            most likely going to run in full 1080. Tap yourself on the back\n            for supporting great devs and for also having great taste. If\n            you are more interested in playing the classics, such as Shenmue,\n            Crazy Taxi, or Jet Set Radio, you\'re going to have to make some\n            sacrifice. Those games all play brilliantly in 1080 through the\n            Redream emulator ... but not on a pi4. You will have to use the\n            redream menu to set the resolution per game. The menu has a lush\n            UI and I honestly doubt you\'ll srtuggle to work that out\n            yourself. Find the resolution settings and drop it down to 480.\n            Don\'t forget, the Dreamcast ran at 480 anyway, if you want more\n            then you will want to look at doing a X86 build.\n        &lt;/p&gt;\n&lt;h3&gt;PSP&lt;/h3&gt;\n&lt;p&gt;\n            Start here: \n            &lt;a href="https://retropie.org.uk/docs/PSP/#performance" target="_blank"&gt;https://retropie.org.uk/docs/PSP/#performance&lt;/a&gt;. Good luck!\n            It\'s playable enough ..    \n        &lt;/p&gt;\n&lt;h2 id="menu-music"&gt;Menu Music&lt;/h2&gt;\n&lt;p&gt;\n            But RetroPie doesn\'t have menu music, I hear you say. That\n            may be, but out of the linux based emulation station\n            frontends, it\'s the least opinionated, so we can just add it\n            ourselves. Neat! First download whatever music you want running\n            on the menu, and place it in &lt;code&gt;~/pi/bgm/&lt;/code&gt; - as many\n            as you want. I only went with one, I used the nintendo wii\n            menu soundtrack to go with my nintendo theme. Next install\n            mpg123:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install mpg123&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next we will want to add the following to the\n            &lt;code&gt;/opt/retropie/configs/all/autostart.sh&lt;/code&gt; file:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-bash"&gt;while pgrep omxplayer &amp;gt;/dev/null; do sleep 1; done\n(sleep 10; mpg123 -Z /home/pi/bgm/*.mp3 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1) &amp;amp;\n    \nemulationstation #auto&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            And in the\n            &lt;code&gt;/opt/retropie/configs/all/runcommand-onstart.sh&lt;/code&gt;\n            file, create one if it doesn\'t already exist:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;pkill -STOP mpg123&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            And then the\n            &lt;code&gt;/opt/retropie/configs/all/runcommand-onend.sh&lt;/code&gt;\n            file, again: create if it doesn\'t exist:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;pkill -CONT mpg123&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            And finally we just need to make those last two files\n            executable:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo chmod a+x /opt/retropie/configs/all/runcommand-onstart.sh\nsudo chmod a+x /opt/retropie/configs/all/runcommand-onend.sh&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Reboot for moods.&lt;/p&gt;\n&lt;h2 id="lightgun"&gt;Lightgun Games&lt;/h2&gt;\n&lt;p&gt;\n            This was surprisingly simple to get going. I don\'t really\n            play MAME games, and there\'s plenty of guides for the\n            MAME lightgun games anyway, jfgi if that\'s what you\'re\n            here for. We will be looking at PSX and Dreamcast instead.\n        &lt;/p&gt;\n&lt;p&gt;\n            You will need a\n            &lt;a href="https://www.amazon.co.uk/Mayflash-W010-Dolphin-Bar-Wireless/dp/B00HZWEB74" target="_blank"&gt;Mayflash\n                Dolphin Bar&lt;/a&gt;, a wiimote, and to do it properly,\n            a wiimote pistol adaptor. With RetroPie, at least, the dolphin\n            bar is plug and play - although you will need to adjust\n            settings in the retroarch menu. You can only use one wiimote\n            per dolphin bar sadly, I\'m not entirely sure a second bar will\n            give you a second wiimote as it works by using the wiimote to\n            emulate mouse and cursor control, but the brave and/or rich\n            among you are welcome to give it a try.\n        &lt;/p&gt;\n&lt;p&gt;\n            Key mapping in emulation station and retroarch respectively\n            can be a pain. So I will go through the basic setup for PSX\n            and Dreamcast. First, once you\'ve synced your wiimote up to\n            your Maylfash Dolphin bar in mode 2, select\n            &lt;em&gt;configure input&lt;/em&gt; in the Emulation Station start menu\n            settings. Emulation Station can\'t detect buttons A or B on\n            the wiimote - this is because these are registering as mouse\n            buttons in mode 2. Further, Retroarch can\'t detect buttons\n            1 or 2 on the wiimote - why this is, I\'m not entirely sure.\n            This is mildly inconvenient, but it\'s not enough to stop\n            us from getting our way. For the Emulation Station input\n            use the following mapping:\n        &lt;/p&gt;\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th scope="col"&gt;Wiimote&lt;/th&gt;\n&lt;th scope="col"&gt;Input&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;Start&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;Select&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;+&lt;/td&gt;\n&lt;td&gt;A&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;B&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;Hotkey&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;p&gt;\n            This is enough to select our games and access the settings\n            menu if we need to. The next steps differ slightly between\n            Dreamcast and PSX. Newer versions of RetroPie use Redream\n            as the default Dreamcast emulator, this is good - it\'s a\n            fantastic emulator. However to use the wiimote we need\n            the power of retroarch customisations, so we will need to\n            install the lr-flycast emulator. So in the RetroPie menu\n            screen, select &lt;em&gt;retropie-setup&lt;/em&gt;, then select\n            &lt;em&gt;manage packages&lt;/em&gt;, then \n            &lt;em&gt;manage optional packages&lt;/em&gt;, and scroll down to\n            lr-flycast and install the emulator. In the Dreamcast\n            games menu, choose a lightgun game such as House of the Dead,\n            launch the game, and interupt the runcommand menu by pressing\n            A when the launch text appears. Choose\n            &lt;em&gt;select emulator for ROM&lt;/em&gt; and set it to lr-flycast,\n            and then launch the game.\n        &lt;/p&gt;\n&lt;p&gt;\n            Once the game has launch, trigger the RetroArch menu using\n            &lt;em&gt;Hotkey + X&lt;/em&gt;. In the &lt;em&gt;quick menu&lt;/em&gt;, select\n            &lt;em&gt;controls, port 1 controls&lt;/em&gt;, then set \n            &lt;em&gt;device type&lt;/em&gt; to &lt;em&gt;lightgun&lt;/em&gt;. Then choose\n            &lt;em&gt;manage remap files&lt;/em&gt;, and &lt;em&gt;save remap file&lt;/em&gt;.\n        &lt;/p&gt;\n&lt;p&gt;\n            Next, go back to &lt;em&gt;quick menu&lt;/em&gt;, then back once more to\n            &lt;em&gt;main menu&lt;/em&gt;, choose\n            &lt;em&gt;settings, input, retropad binds, port 1 controls&lt;/em&gt;, and\n            set the following mappings:\n        &lt;/p&gt;\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th scope="col"&gt;Wiimote&lt;/th&gt;\n&lt;th scope="col"&gt;Input&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;B&lt;/td&gt;\n&lt;td&gt;Gun Trigger&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;A&lt;/td&gt;\n&lt;td&gt;Gun Reload&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;+&lt;/td&gt;\n&lt;td&gt;Gun Start&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;p&gt;\n            Next, go back to &lt;em&gt;quick menu&lt;/em&gt;, select \n            &lt;em&gt;core options, input&lt;/em&gt;, and set the gun crosshair\n            1 display by choosing which crosshair you would like.\n        &lt;/p&gt;\n&lt;p&gt;\n            Finally, back in the &lt;em&gt;main menu&lt;/em&gt;, select\n            &lt;em&gt;configuration file&lt;/em&gt;, and then\n            &lt;em&gt;save current configuration&lt;/em&gt; for settings to\n            persist the next time you load the game.\n        &lt;/p&gt;\n&lt;p&gt;\n            For PSX, we will be using the same emulator as with\n            every other game, so we don\'t need to change anything\n            there. The set up is similar to Dreamcast, except for\n            the device type and button mapping.\n            Instead of setting device type to\n            &lt;em&gt;lightgun&lt;/em&gt;, choose &lt;em&gt;guncon&lt;/em&gt;. And, for\n            Time Crisis at least, this is the better mapping:\n        &lt;/p&gt;\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th scope="col"&gt;Wiimote&lt;/th&gt;\n&lt;th scope="col"&gt;Input&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;B&lt;/td&gt;\n&lt;td&gt;Gun Trigger&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;A&lt;/td&gt;\n&lt;td&gt;Gun Aux A&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Home&lt;/td&gt;\n&lt;td&gt;Gun Reload&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;+&lt;/td&gt;\n&lt;td&gt;Gun Start&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;td&gt;D-Pad&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;p class="note"&gt;\n            Note: you will need to play around with different mappings\n            for different games depending on the controls they use,\n            however these mappings are a decent starting point to work\n            from.\n        &lt;/p&gt;\n&lt;h2 id="nintendo-ds"&gt;Nintendo DS&lt;/h2&gt;\n&lt;p&gt;\n            Drastic is the suggested DS emulator for RetroPie. It is\n            experimental but works quite well from what I\'ve played\n            on it. In the RetroPie settings menu, choose\n            &lt;em&gt;retropie-setup&lt;/em&gt;, then \n            &lt;em&gt;manage packages, manage experimental packages&lt;/em&gt;,\n            and then install drastic.\n        &lt;/p&gt;\n&lt;p&gt;\n            You may need to map some buttons, I can\'t remember if\n            the home button is the default one to open the settings\n            menu, but make sure you keep a key mapped for it,\n            otherwise you may have to delete the mapping file and\n            start again. Drastic has the option to align the screens\n            horizontally or vertically, which is a nice touch for\n            games like pokemon where you can muster a little more\n            screen real estate. As far as I know, there is no way to\n            enforce a padding between the 2 screens, so things moving\n            from top to bottom, or vice versa, tend to look a little\n            awkward, but really you should be giving Nintendo your\n            money for a quality experience so go cry in a corner.\n            You wouldn\'t steal a car, would you?\n        &lt;/p&gt;\n&lt;p&gt;\n            If you have a Mayflash Dolphin Bar set to mode 2, and a\n            synced wiimote, you already have a stylus, it\'s already\n            set up. Don\'t believe me? Try it out ... I know right, I \n            was stoked on that too! What are you waiting for? Go play\n            WarioWare!\n        &lt;/p&gt;\n&lt;h2 id="achievements"&gt;RetroAchievements&lt;/h2&gt;\n&lt;p&gt;\n            Trophies! Set up an account at\n            &lt;a href="https://retroachievements.org/"&gt;RetroAchievements&lt;/a&gt;\n            to add replay value to all your old favourites! You\'ll\n            find the settings for this in the retroarch settings.\n            It will only work with the libretro cores, which is most\n            of what you will be using. It won\'t work with Redream,\n            Drastic, or PPSSPP emulators - but unless you\'ve replaced\n            the lr cores for different ones, it should run on every\n            other emulator you will be using.\n        &lt;/p&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/retropie-nespi-4.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/retropie-nespi-4.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/retropie-nespi-4.jpg" />
    </item>
    <item>
      <title>Media Keyboard - Pico Controller</title>
      <link>https://aaronwattsdev.com/projects/media-keyboard</link>
      <pubDate>Sun, 14 Apr 2024</pubDate>
      <description>My keyboard doesn't include the media keys, so I built a macro keyboard to control the media on my desktop computer. It is plug'n'play and requires no configuration to work between different devices. The project can be easily tweaked to program macro's for work, steam games, and whatever else you can't be bothered to type out manually.</description>
      <guid>https://aaronwattsdev.com/projects/media-keyboard</guid>
      <content:encoded>b'\n&lt;h1&gt;Media Keyboard - Pico Controller&lt;/h1&gt;\n&lt;time datetime="2024-04-14"&gt;14&lt;sup&gt;th&lt;/sup&gt; April, 2024&lt;/time&gt;\n&lt;img alt="A Raspberry Pi Pico controller on a breadboard, wired\n        up to six coloured buttons, in the pattern of white, blue,\n        blue, white, blue, white." src="/images/projects/media-keyboard.jpg"/&gt;\n&lt;p id="intro"&gt;\n            My keyboard doesn\'t include the media keys, so I built a macro\n            keyboard to control the media on my desktop computer. It is\n            plug\'n\'play and requires no configuration to work between\n            different devices. The project can be easily tweaked to program\n            macro\'s for work, steam games, and whatever else you can\'t be\n            bothered to type out manually.\n        &lt;/p&gt;\n&lt;p&gt;\n            I won\'t be going through the first time setup of the pico here,\n            so that is something you\'re going to have to look up yourself.\n            Once you know how to get some python code on the device and\n            get it to run, you\'re ready, so see you then!\n        &lt;/p&gt;\n&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;\n&lt;p&gt;\n            When you know how to move data on and off the device and run\n            some python on it, you will want to install\n            &lt;a href="https://circuitpython.org/downloads"&gt;CircuitPython&lt;/a&gt;\n            on it. We will be using the \n            &lt;a href="https://github.com/adafruit/Adafruit_CircuitPython_HID"&gt;\n                Adafruit CircuitPython HID&lt;/a&gt;\n            library too. The easiest way to do this is to download the\n            newest &lt;em&gt;mpy&lt;/em&gt; version from the releases page, unzip the\n            download, and copy the &lt;code&gt;adafruit_hid/&lt;/code&gt; directory into\n            the &lt;code&gt;lib/&lt;/code&gt; directory on the pico.\n        &lt;/p&gt;\n&lt;h2 id="button-setup"&gt;Button Set Up&lt;/h2&gt;\n&lt;aside&gt;\n            Note: I will assume you know how to wire a button. I\'m using\n            the same ground pin for all 6. I have used GPIO pins 16 to\n            21, which keeps things nice and tidy as the are all in one\n            corner of the pico.\n        &lt;/aside&gt;\n&lt;p&gt;\n            First we need to import the libraries we need, including the\n            adafruit consumer control modules:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;import time\nimport digitalio\nimport board\nimport usb_hid\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next we can look at how to set up a single key:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;cc = ConsumerControl(usb_hid.devices)\nwait = 0.125\n\nbtn1 = digitalio.DigitalInOut(board.GP21)\nbtn1.direction = digitalio.Direction.INPUT\nbtn1.pull = digitalio.Pull.DOWN&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            If you have ever set up buttons using GPIO on a raspberry\n            pi, then this should all be looking pretty familiar.\n            We assign &lt;code&gt;btn1&lt;/code&gt; a GPIO address, state that\n            the GPIO is receiving input, and identify whether the\n            buttons &lt;em&gt;awake&lt;/em&gt; state should be when UP or DOWN.\n        &lt;/p&gt;\n&lt;p&gt;\n            Of course this is a long process to go through for multiple\n            buttons, and we will use some syntactic prowess to make this\n            easier. But for now, let\'s finally look at the program loop\n            that will be listening for key presses:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;while True:\n    if btn1.value:\n        print(\'key pressed\')\n        cc.send(Consumer.ControlCode.PLAY_PAUSE)&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="optimising"&gt;Optimising the Code&lt;/h2&gt;\n&lt;p&gt;\n            As mentioned, going through this process for 6 keys,\n            and setting up the conditional logic to handle key\n            presses would be a little tedious. To remedy this, we\n            can use the power of python lists and dictionaries to\n            create a list of each GPIO address, and what event\n            that each specific event will correspond to:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;media_keys = [\n    {\'pin\':board.GP21, \'code\':ConsumerControlCode.MUTE},\n    {\'pin\':board.GP16, \'code\':ConsumerControlCode.VOLUME_DECREMENT},\n    {\'pin\':board.GP20, \'code\':ConsumerControlCode.VOLUME_INCREMENT},\n    {\'pin\':board.GP19, \'code\':ConsumerControlCode.SCAN_PREVIOUS_TRACK},\n    {\'pin\':board.GP17, \'code\':ConsumerControlCode.PLAY_PAUSE},\n    {\'pin\':board.GP18, \'code\':ConsumerControlCode.SCAN_NEXT_TRACK}\n    ]&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Neat, right? What about assigning the active states to\n            each key? Rather than add repeated information into our\n            keys list, we can just use a for loop to add this info\n            to each dictionary in the list:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;    for media_key in media_keys:\n        media_key[\'btn\'] = digitalio.DigitalInOut(media_key[\'pin\'])\n        media_key[\'btn\'].direction = digitalio.Direction.INPUT\n        media_key[\'btn\'].pull = digitalio.Pull.DOWN&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Isn\'t python great? Lastly we can use a for loop again,\n            this time for the key listener loop, making use of the\n            power of python to save us typing out tedious and\n            repetitive code:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-python"&gt;    while True:\n        for media_key in media_keys:\n            if media_key[\'btn\'].value:\n                cc.send(media_key[\'code\'])\n                time.sleep(wait)\n        time.sleep(wait)&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="finished-code"&gt;The Finished Code&lt;/h2&gt;\n&lt;p&gt;\n            The following code should be saved on the pico\'s top-most\n            directory as &lt;code&gt;code.py&lt;/code&gt;. Adding print statements\n            to the while loop should aid in debugging if you find it\n            doesn\'t work correctly.\n        &lt;/p&gt;\n&lt;pre class="no-wrap"&gt;&lt;code class="language-python"&gt;import time\nimport digitalio\nimport board\nimport usb_hid\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\ncc = ConsumerControl(usb_hid.devices)\nwait = 0.125\n\nmedia_keys = [\n    {\'pin\':board.GP21,\'code\':ConsumerControlCode.MUTE},\n    {\'pin\':board.GP16,\'code\':ConsumerControlCode.VOLUME_DECREMENT},\n    {\'pin\':board.GP20,\'code\':ConsumerControlCode.VOLUME_INCREMENT},\n    {\'pin\':board.GP19,\'code\':ConsumerControlCode.SCAN_PREVIOUS_TRACK},\n    {\'pin\':board.GP17,\'code\':ConsumerControlCode.PLAY_PAUSE},\n    {\'pin\':board.GP18,\'code\':ConsumerControlCode.SCAN_NEXT_TRACK}\n    ]\n\nfor media_key in media_keys:\n    media_key[\'btn\'] = digitalio.DigitalInOut(media_key[\'pin\'])\n    media_key[\'btn\'].direction = digitalio.Direction.INPUT\n    media_key[\'btn\'].pull = digitalio.Pull.DOWN\n\nwhile True:\n    for media_key in media_keys:\n        if media_key[\'btn\'].value:\n            cc.send(media_key[\'code\'])\n            time.sleep(wait)\n    time.sleep(wait)&lt;/code&gt;&lt;/pre&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/media-keyboard.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/media-keyboard.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/media-keyboard.jpg" />
    </item>
    <item>
      <title>KDE Plasma Bigscreen - Raspberry Pi 4</title>
      <link>https://aaronwattsdev.com/projects/kde-plasma-bigscreen</link>
      <pubDate>Tue, 02 Apr 2024</pubDate>
      <description>I built this media centre at the start of 2024. There may be easier methods of installation by now. When I built this project, existing guides mentioned an installation image on KDE's bigscreen page, however, it doesn't seem to exist currently, except for a manjaro image, and I prefer to stick to Raspberry Pi's own debian OS when I can, especially that it ensures the best compatibility with things like cases and accessories.</description>
      <guid>https://aaronwattsdev.com/projects/kde-plasma-bigscreen</guid>
      <content:encoded>b'\n&lt;h1&gt;KDE Plasma Bigscreen - Raspberry Pi 4&lt;/h1&gt;\n&lt;time datetime="2024-04-02"&gt;2&lt;sup&gt;nd&lt;/sup&gt; April, 2024&lt;/time&gt;\n&lt;img alt="A Rspberry Pi 4b in an Argon One M.2. Sata case, powered\n        on and plugged into a TV that is on the KDE Plasma Bigscreen\n        home screen, with a Debian logo wallpaper." src="/images/projects/kde-plasma-bigscreen.jpg"/&gt;\n&lt;p id="intro"&gt;\n            I built this media centre at the start of 2024. There may\n            be easier methods of installation by now. When I built this\n            project, existing guides mentioned an installation image\n            on KDE\'s bigscreen page, however, it doesn\'t seem to exist\n            currently, except for a manjaro image, and I prefer to stick\n            to Raspberry Pi\'s own debian OS when I can, especially that\n            it ensures the best compatibility with things like cases and\n            accessories.\n        &lt;/p&gt;\n&lt;p&gt;\n            Feel free to change and tweak what you like to what suits you,\n            however, things you will need are:\n        &lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;Raspberry Pi 4b (2GB RAM+)&lt;/li&gt;\n&lt;li&gt;USB storage device&lt;/li&gt;\n&lt;li&gt;Some kind of cooling system&lt;/li&gt;\n&lt;li&gt;Something to do buttons on&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;\n            I used a pi 4b 4GB RAM model myself for this project, as\n            it was the unit that my pi 5 replaced on my work desk.\n            While testing the system, I never pushed the RAM much past\n            1.7GB, so I think anything 2GB or higher will run okay.\n            Anything lower than a pi 4 is going to struggle rendering\n            KDE - the pi 4 needs an overclock to get everything running\n            smoothly, hence the required cooling system. I used the\n            Argon One case with the sata M.2. drive expansion, however\n            I got similar results with preformance running from a USB\n            3.0 thumb drive. Plasma bigscreen, while offering limited\n            support for remote controls, doesn\'t come with apps, so we\n            will be using web-apps through the chromium browser, so\n            some kind of keyboard is advised - KDE Connect on an android\n            phone works great here, or you can get mini wireless keyboards\n            with built in track pads on amazon.\n        &lt;/p&gt;\n&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;\n&lt;p&gt;\n            Start by flashing the latest\n            &lt;a href="https://www.raspberrypi.com/software/operating-systems/" target="_blank"&gt;\n                64-bit Raspberry Pi OS Lite&lt;/a&gt;\n            to a usb device. You may need to\n            &lt;a href="https://www.raspberrystreet.com/learn/how-to-boot-raspberrypi-from-usb-ssd" target="_blank"&gt;\n                update the EEPROM&lt;/a&gt;\n            if you haven\'t already in order to boot from USB. Take\n            advantage of rpi imager settings here to enable SSH and\n            change hostname so you can tell it apart from the 6 other\n            pi\'s you have running around your house. If using a\n            different imaer then don\'t forget to include the SSH\n            file as you may need it on the next step.\n        &lt;/p&gt;\n&lt;p&gt;\n            After initial boot, the screen may black out, using the\n            same image I had this happen with the USB SSB, but not\n            the USB thumb drive - your guess is as good as mine..\n            If it blacks out then ssh in and vi or nano into\n            &lt;code&gt;/boot/firmware/config.txt&lt;/code&gt; and comment out\n            and add the following lines:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;#dtoverlay=vc4-kms-v3d\ndtoverlay=vc4-fkms-v3d&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Now that the screen is working you can log into the\n            session, and make the usual prayer\n            &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;/code&gt;\n            followed by a &lt;code&gt;sudo reboot&lt;/code&gt; for luck.\n        &lt;/p&gt;\n&lt;h2 id="installing-kde-plasma"&gt;Installing KDE Plasma&lt;/h2&gt;\n&lt;p&gt;\n            Next we need to istall KDE Plasma; I ooriginally went\n            for &lt;code&gt;kde-plasma-desktop&lt;/code&gt; as its the lighter\n            install, but it kept hanging at boot, you ight have more\n            luck, but expect to start again if it fails.\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install kde-standard&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            After that, another reboot for luck. Then we need to\n            activate the sddm login manager service, and tell\n            raspi OS that we want to boot into GUI on the next\n            boot:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo systemctl enable sddm\nsudo systemctl set-default graphical.target&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            And reboot again. It should now boot into Plasma,\n            and the first thing you should do is disable all the\n            destkop effects; older pi KDE Plasma guides suggest\n            to disable the compositor, but the session defaults\n            to wayland unless you tell it not, and wayland can\'t\n            run without the compositor - I\'ve noticed no major\n            differences between X11 and wayland myself in this\n            use case (don\'t believe the hype).\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: disabling compositor in X causes screen tearing\n            on video playback, so even if you choose to use X,\n            leave the compositor on and just disable effects.\n        &lt;/aside&gt;\n&lt;p&gt;\n            If you\'re also using an Argon One case, now is the\n            time to open up konsole and install the power and\n            fan control:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;curl https://download.argon40.com/argon1.sh | bash&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="setting-up-plasma-bigscreen"&gt;Setting Up Plasma Bigscreen&lt;/h2&gt;\n&lt;p&gt;\n            Now the effects are disabled, and if you have your\n            cooling set up, now is a good time to overclock,\n            so back into &lt;code&gt;/boot/firmware/config.txt&lt;/code&gt;.\n            I just went with the following:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;# Overclock\nover_voltage=6\narm_freq=2000\ngpu_freq=700&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next we can install the other bits we need:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install chromium-browser rpi-chromium-mods plasma-bigscreen&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            If you want to watch DRM services like netflix you\n            need another package that\'s not included in lite:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install libwidevinecdm0&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            KDE connect and an android phone make the perfect\n            remote control, connect should already be included\n            in the KDE install. But firewall suggested, with\n            KDE connect and SSH rules:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install ufw\nsudo ufw allow 1714:1764/upd\nsudo ufw allow 1714:1764/tcp\nsudo ufw allow 22/tcp\nsudo ufw enable&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;\n            Next open chromium, add the extensions you want,\n            and &lt;em&gt;"install"&lt;/em&gt; your &lt;em&gt;"web apps"&lt;/em&gt;.\n        &lt;/p&gt;\n&lt;aside&gt;\n            Note: skip the splash screen - instead of installing\n            web app when your on &lt;u&gt;questionable.com&lt;/u&gt;, go to\n            &lt;u&gt;questionable.com/home&lt;/u&gt; and install from there.\n        &lt;/aside&gt;\n&lt;aside&gt;\n            Note:\n            &lt;a href="https://chromewebstore.google.com/detail/ublock-origin" target="_blank"&gt;uBlock Origin&lt;/a&gt; and\n            &lt;a href="https://chromewebstore.google.com/detail/privacy-badger" target="_blank"&gt;Privacy Badger&lt;/a&gt; highly\n            recommended!\n        &lt;/aside&gt;\n&lt;aside&gt;\n            Update: with the introduction of Web Manifest V3 to\n            Chromium based browsers, you may prefer to set your\n            web apps to run through Firefox. Firefox for desktop\n            doesn\'t support this natively, but there is a guide on\n            how to set this up\n            &lt;a href="/projects/firefox-web-apps"&gt;here&lt;/a&gt;.\n        &lt;/aside&gt;\n&lt;p&gt;\n            Now open up KDE settings again, select\n            &lt;em&gt;Startup and Shutdown &amp;gt; Login Screen (SDDM)&lt;/em&gt;,\n            and then click the behaviour button at the bottom and\n            set plasma to log in automatically and change the session\n            to bigscreen, enter your password to confirm, and it\n            should prompt you to set a password for the keychain.\n            I set a blank password because I want other people to\n            be able to use the TV. Also disbale power saving, or\n            at least getting sent back to the login screen after\n            sleep.\n        &lt;/p&gt;\n&lt;p&gt;\n            Done! Reboot and enjoy!\n        &lt;/p&gt;\n&lt;h2 id="controls"&gt;Controls&lt;/h2&gt;\n&lt;h3&gt;KDE Connect&lt;/h3&gt;\n&lt;p&gt;\n            By far the best option if you have an android phone or\n            tablet lying around. KDE Connect for android is available\n            in the standard\n            &lt;a href="https://f-droid.org/en/packages/org.kde.kdeconnect_tp/" target="_blank"&gt;F-Droid repository&lt;/a&gt;. The\n            app includes\n            a big screen feature, but you can get most of what you need\n            done using the remote input feature.\n        &lt;/p&gt;\n&lt;aside&gt;\n            As a side, &lt;a href="https://f-droid.org/en/packages/juloo.keyboard2/" target="_blank"&gt;Unexpected\n                Keyboard&lt;/a&gt; is a configurable\n            keyboard for android that includes all the keys you might\n            need to use the terminal.\n        &lt;/aside&gt;\n&lt;h3&gt;Mini Wireless Keyboard with Touchpad&lt;/h3&gt;\n&lt;p&gt;\n            The\n            &lt;a href="https://www.amazon.co.uk/gp/product/B01G6XGLQQ" target="_blank"&gt;Rii K01X1 2.4GHz Mini Wireless\n                Keyboard\n                with Touchpad Remote Control&lt;/a&gt; is the perfect companion\n            for interacting with Plasma Bigscreen. However the range\n            doesn\'t appear to be very long, especially on the Argon\n            One case where the receiver plugged in at the back due to the\n            Argon remote interacting with the front of the case.\n            However this can be easily remedied with a short\n            &lt;a href="https://www.amazon.co.uk/dp/B09LYRRQ91" target="_blank"&gt;USB extension cable&lt;/a&gt;\n            to point the receiver in the correct\n            direction.\n        &lt;/p&gt;\n&lt;h3&gt;Argon IR Remote&lt;/h3&gt;\n&lt;p&gt;\n            As I previously mentioned, I am using an Argon One case,\n            which is great as I get to use the Argon IR remote control.\n            However, the debian version of Plasma Bigscreen doesn\'t\n            have a working option to configure remotes as yet, so the\n            remote is somewhat useless for now - except for the power\n            button that is. And I love being able to power my pi on\n            and off without leaving my sofa and walking the few feet\n            required to do it manually. If you are using an Argon One\n            case, the setup script should get everything installed for\n            you, and then you simply need to type &lt;code&gt;argonone-ir&lt;/code&gt;\n            into the terminal to get it set up.\n        &lt;/p&gt;\n&lt;h2 id="some-optional-polish"&gt;Some Optional Polish&lt;/h2&gt;\n&lt;h3&gt;Window Decorations&lt;/h3&gt;\n&lt;p&gt;\n            Plasma Bigscreen is designed to work one window at a time,\n            so if you minus a window without a keyboard, then you\'ve\n            essentially lost it for good. In settings you can remove\n            the titlebar buttons for max/min and hide, and just leave\n            the one to close the window with.\n        &lt;/p&gt;\n&lt;h3&gt;Splashscreen&lt;/h3&gt;\n&lt;p&gt;\n            In KDE settings change the splash screen from the default\n            KDE one to the Plasma Bigscreen one, so that while you wait\n            for your smart TV to boot up, you can relish in your\n            accomplishment of having the most obscure smart TV out of\n            everyone you know.\n        &lt;/p&gt;\n&lt;h3&gt;XScreensaver&lt;/h3&gt;\n&lt;aside&gt;\n            Note: It looks like this version of Bigscreen doesn\'t cooperate\n            with XScreensaver very well. I\'ve encountered 2 issues so far:\n            firstly: the login scripts don\'t load up, and secondly:\n            if the login scripts load up, then XScreensaver gets called\n            after "inactivity" when watching content in fullscreen mode,\n            which shouldn\'t happen. This, however, worked fine when using\n            an X86 device with arch linux and the newer version of\n            Bigscreen.\n        &lt;/aside&gt;\n&lt;p&gt;\n            XScreensaver has a pretty cool analog tv effect screensaver\n            that will cycle through images in a folder and display them\n            with various tv static effects:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo apt install xscreensaver xscreensaver-data-extra&lt;/code&gt;&lt;/pre&gt;\n&lt;h2 id="not-quite-full-screen"&gt;Not Quite Full Screen&lt;/h2&gt;\n&lt;p&gt;\n            KDE\'s window management isn\'t quite perfect, and full screen\n            often falls short by 1 pixel on the right and bottom borders\n            (despite any window rules you might add). This can be an\n            irritant when a bright wallpaper sits behind whatever you\'re\n            watching. The easiest fix is to set a dark-edged wallpaper.\n            The newer bigscreen lets you use kde settings which is nice\n            as you can set the wallpaper to plain colour black, but in\n            the debian version you have to use the built in wallpaper\n            settings app found in the bigscreen settings menu on the\n            home screen. It will only show you the wallpapers that are\n            installed, so download your dark wallpaper, then move it to\n            the wallpaper folder and then it will show up in the wallpaper\n            changer application:\n        &lt;/p&gt;\n&lt;pre&gt;&lt;code class="language-none"&gt;sudo mv ~/Downloads/&amp;lt;wallpaper&amp;gt; /usr/share/wallpaper/&lt;/code&gt;&lt;/pre&gt;\n'</content:encoded>
      <enclosure url="https://aaronwattsdev.com/images/projects/kde-plasma-bigscreen.jpg" length="0" type="image/jpeg" />
      <media:thumbnail url="https://aaronwattsdev.com/images/projects/kde-plasma-bigscreen.jpg" width="1920" height="1080" />
      <media:content type="image/jpeg" url="https://aaronwattsdev.com/images/projects/kde-plasma-bigscreen.jpg" />
    </item>
  </channel>
</rss>